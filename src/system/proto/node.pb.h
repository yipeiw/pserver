// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: system/proto/node.proto

#ifndef PROTOBUF_system_2fproto_2fnode_2eproto__INCLUDED
#define PROTOBUF_system_2fproto_2fnode_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "util/proto/range.pb.h"
// @@protoc_insertion_point(includes)

namespace PS {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_system_2fproto_2fnode_2eproto();
void protobuf_AssignDesc_system_2fproto_2fnode_2eproto();
void protobuf_ShutdownFile_system_2fproto_2fnode_2eproto();

class Node;

enum Node_Role {
  Node_Role_SERVER = 0,
  Node_Role_WORKER = 1,
  Node_Role_MANAGER = 2,
  Node_Role_SCHEDULER = 3,
  Node_Role_GROUP = 4,
  Node_Role_UNUSED = 5
};
bool Node_Role_IsValid(int value);
const Node_Role Node_Role_Role_MIN = Node_Role_SERVER;
const Node_Role Node_Role_Role_MAX = Node_Role_UNUSED;
const int Node_Role_Role_ARRAYSIZE = Node_Role_Role_MAX + 1;

const ::google::protobuf::EnumDescriptor* Node_Role_descriptor();
inline const ::std::string& Node_Role_Name(Node_Role value) {
  return ::google::protobuf::internal::NameOfEnum(
    Node_Role_descriptor(), value);
}
inline bool Node_Role_Parse(
    const ::std::string& name, Node_Role* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Node_Role>(
    Node_Role_descriptor(), name, value);
}
// ===================================================================

class Node : public ::google::protobuf::Message {
 public:
  Node();
  virtual ~Node();

  Node(const Node& from);

  inline Node& operator=(const Node& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Node& default_instance();

  void Swap(Node* other);

  // implements Message ----------------------------------------------

  Node* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Node& from);
  void MergeFrom(const Node& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Node_Role Role;
  static const Role SERVER = Node_Role_SERVER;
  static const Role WORKER = Node_Role_WORKER;
  static const Role MANAGER = Node_Role_MANAGER;
  static const Role SCHEDULER = Node_Role_SCHEDULER;
  static const Role GROUP = Node_Role_GROUP;
  static const Role UNUSED = Node_Role_UNUSED;
  static inline bool Role_IsValid(int value) {
    return Node_Role_IsValid(value);
  }
  static const Role Role_MIN =
    Node_Role_Role_MIN;
  static const Role Role_MAX =
    Node_Role_Role_MAX;
  static const int Role_ARRAYSIZE =
    Node_Role_Role_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Role_descriptor() {
    return Node_Role_descriptor();
  }
  static inline const ::std::string& Role_Name(Role value) {
    return Node_Role_Name(value);
  }
  static inline bool Role_Parse(const ::std::string& name,
      Role* value) {
    return Node_Role_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .PS.Node.Role role = 1;
  inline bool has_role() const;
  inline void clear_role();
  static const int kRoleFieldNumber = 1;
  inline ::PS::Node_Role role() const;
  inline void set_role(::PS::Node_Role value);

  // optional string id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // optional int32 rank = 5;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 5;
  inline ::google::protobuf::int32 rank() const;
  inline void set_rank(::google::protobuf::int32 value);

  // optional string hostname = 3;
  inline bool has_hostname() const;
  inline void clear_hostname();
  static const int kHostnameFieldNumber = 3;
  inline const ::std::string& hostname() const;
  inline void set_hostname(const ::std::string& value);
  inline void set_hostname(const char* value);
  inline void set_hostname(const char* value, size_t size);
  inline ::std::string* mutable_hostname();
  inline ::std::string* release_hostname();
  inline void set_allocated_hostname(::std::string* hostname);

  // optional int32 port = 4;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 4;
  inline ::google::protobuf::int32 port() const;
  inline void set_port(::google::protobuf::int32 value);

  // optional .PS.PbRange key = 6;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 6;
  inline const ::PS::PbRange& key() const;
  inline ::PS::PbRange* mutable_key();
  inline ::PS::PbRange* release_key();
  inline void set_allocated_key(::PS::PbRange* key);

  // @@protoc_insertion_point(class_scope:PS.Node)
 private:
  inline void set_has_role();
  inline void clear_has_role();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_rank();
  inline void clear_has_rank();
  inline void set_has_hostname();
  inline void clear_has_hostname();
  inline void set_has_port();
  inline void clear_has_port();
  inline void set_has_key();
  inline void clear_has_key();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* id_;
  int role_;
  ::google::protobuf::int32 rank_;
  ::std::string* hostname_;
  ::PS::PbRange* key_;
  ::google::protobuf::int32 port_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_system_2fproto_2fnode_2eproto();
  friend void protobuf_AssignDesc_system_2fproto_2fnode_2eproto();
  friend void protobuf_ShutdownFile_system_2fproto_2fnode_2eproto();

  void InitAsDefaultInstance();
  static Node* default_instance_;
};
// ===================================================================


// ===================================================================

// Node

// required .PS.Node.Role role = 1;
inline bool Node::has_role() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Node::set_has_role() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Node::clear_has_role() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Node::clear_role() {
  role_ = 0;
  clear_has_role();
}
inline ::PS::Node_Role Node::role() const {
  return static_cast< ::PS::Node_Role >(role_);
}
inline void Node::set_role(::PS::Node_Role value) {
  assert(::PS::Node_Role_IsValid(value));
  set_has_role();
  role_ = value;
}

// optional string id = 2;
inline bool Node::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Node::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Node::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Node::clear_id() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& Node::id() const {
  return *id_;
}
inline void Node::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void Node::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void Node::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Node::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  return id_;
}
inline ::std::string* Node::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Node::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 rank = 5;
inline bool Node::has_rank() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Node::set_has_rank() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Node::clear_has_rank() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Node::clear_rank() {
  rank_ = 0;
  clear_has_rank();
}
inline ::google::protobuf::int32 Node::rank() const {
  return rank_;
}
inline void Node::set_rank(::google::protobuf::int32 value) {
  set_has_rank();
  rank_ = value;
}

// optional string hostname = 3;
inline bool Node::has_hostname() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Node::set_has_hostname() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Node::clear_has_hostname() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Node::clear_hostname() {
  if (hostname_ != &::google::protobuf::internal::kEmptyString) {
    hostname_->clear();
  }
  clear_has_hostname();
}
inline const ::std::string& Node::hostname() const {
  return *hostname_;
}
inline void Node::set_hostname(const ::std::string& value) {
  set_has_hostname();
  if (hostname_ == &::google::protobuf::internal::kEmptyString) {
    hostname_ = new ::std::string;
  }
  hostname_->assign(value);
}
inline void Node::set_hostname(const char* value) {
  set_has_hostname();
  if (hostname_ == &::google::protobuf::internal::kEmptyString) {
    hostname_ = new ::std::string;
  }
  hostname_->assign(value);
}
inline void Node::set_hostname(const char* value, size_t size) {
  set_has_hostname();
  if (hostname_ == &::google::protobuf::internal::kEmptyString) {
    hostname_ = new ::std::string;
  }
  hostname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Node::mutable_hostname() {
  set_has_hostname();
  if (hostname_ == &::google::protobuf::internal::kEmptyString) {
    hostname_ = new ::std::string;
  }
  return hostname_;
}
inline ::std::string* Node::release_hostname() {
  clear_has_hostname();
  if (hostname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = hostname_;
    hostname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Node::set_allocated_hostname(::std::string* hostname) {
  if (hostname_ != &::google::protobuf::internal::kEmptyString) {
    delete hostname_;
  }
  if (hostname) {
    set_has_hostname();
    hostname_ = hostname;
  } else {
    clear_has_hostname();
    hostname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 port = 4;
inline bool Node::has_port() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Node::set_has_port() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Node::clear_has_port() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Node::clear_port() {
  port_ = 0;
  clear_has_port();
}
inline ::google::protobuf::int32 Node::port() const {
  return port_;
}
inline void Node::set_port(::google::protobuf::int32 value) {
  set_has_port();
  port_ = value;
}

// optional .PS.PbRange key = 6;
inline bool Node::has_key() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Node::set_has_key() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Node::clear_has_key() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Node::clear_key() {
  if (key_ != NULL) key_->::PS::PbRange::Clear();
  clear_has_key();
}
inline const ::PS::PbRange& Node::key() const {
  return key_ != NULL ? *key_ : *default_instance_->key_;
}
inline ::PS::PbRange* Node::mutable_key() {
  set_has_key();
  if (key_ == NULL) key_ = new ::PS::PbRange;
  return key_;
}
inline ::PS::PbRange* Node::release_key() {
  clear_has_key();
  ::PS::PbRange* temp = key_;
  key_ = NULL;
  return temp;
}
inline void Node::set_allocated_key(::PS::PbRange* key) {
  delete key_;
  key_ = key;
  if (key) {
    set_has_key();
  } else {
    clear_has_key();
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace PS

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PS::Node_Role>() {
  return ::PS::Node_Role_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_system_2fproto_2fnode_2eproto__INCLUDED
