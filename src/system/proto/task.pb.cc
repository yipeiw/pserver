// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: system/proto/task.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "system/proto/task.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace PS {

namespace {

const ::google::protobuf::Descriptor* Task_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Task_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Task_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ManageNode_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ManageNode_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ManageNode_Command_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ManageApp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ManageApp_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ManageApp_Command_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* DataType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_system_2fproto_2ftask_2eproto() {
  protobuf_AddDesc_system_2fproto_2ftask_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "system/proto/task.proto");
  GOOGLE_CHECK(file != NULL);
  Task_descriptor_ = file->message_type(0);
  static const int Task_offsets_[18] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, customer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, wait_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, key_range_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, key_channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, has_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, key_channel_str_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, key_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, value_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, filter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, mng_node_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, mng_app_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, shared_para_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, sgd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, bcd_),
  };
  Task_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Task_descriptor_,
      Task::default_instance_,
      Task_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, _unknown_fields_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, _extensions_),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Task));
  Task_Type_descriptor_ = Task_descriptor_->enum_type(0);
  ManageNode_descriptor_ = file->message_type(1);
  static const int ManageNode_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManageNode, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManageNode, node_),
  };
  ManageNode_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ManageNode_descriptor_,
      ManageNode::default_instance_,
      ManageNode_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManageNode, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManageNode, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ManageNode));
  ManageNode_Command_descriptor_ = ManageNode_descriptor_->enum_type(0);
  ManageApp_descriptor_ = file->message_type(2);
  static const int ManageApp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManageApp, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManageApp, conf_),
  };
  ManageApp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ManageApp_descriptor_,
      ManageApp::default_instance_,
      ManageApp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManageApp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManageApp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ManageApp));
  ManageApp_Command_descriptor_ = ManageApp_descriptor_->enum_type(0);
  DataType_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_system_2fproto_2ftask_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Task_descriptor_, &Task::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ManageNode_descriptor_, &ManageNode::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ManageApp_descriptor_, &ManageApp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_system_2fproto_2ftask_2eproto() {
  delete Task::default_instance_;
  delete Task_reflection_;
  delete ManageNode::default_instance_;
  delete ManageNode_reflection_;
  delete ManageApp::default_instance_;
  delete ManageApp_reflection_;
}

void protobuf_AddDesc_system_2fproto_2ftask_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::PS::protobuf_AddDesc_util_2fproto_2frange_2eproto();
  ::PS::protobuf_AddDesc_data_2fproto_2fdata_2eproto();
  ::PS::protobuf_AddDesc_system_2fproto_2fnode_2eproto();
  ::PS::protobuf_AddDesc_parameter_2fproto_2fparam_2eproto();
  ::PS::protobuf_AddDesc_filter_2fproto_2ffilter_2eproto();
  ::PS::protobuf_AddDesc_learner_2fproto_2fsgd_2eproto();
  ::PS::protobuf_AddDesc_learner_2fproto_2fbcd_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\027system/proto/task.proto\022\002PS\032\026util/prot"
    "o/range.proto\032\025data/proto/data.proto\032\027sy"
    "stem/proto/node.proto\032\033parameter/proto/p"
    "aram.proto\032\031filter/proto/filter.proto\032\027l"
    "earner/proto/sgd.proto\032\027learner/proto/bc"
    "d.proto\"\344\004\n\004Task\022*\n\004type\030\001 \001(\0162\r.PS.Task"
    ".Type:\rCALL_CUSTOMER\022\026\n\007request\030\002 \001(\010:\005f"
    "alse\022\020\n\010customer\030\004 \001(\t\022\014\n\004time\030\005 \001(\005\022\021\n\t"
    "wait_time\030\006 \003(\005\022\036\n\tkey_range\030\007 \001(\0132\013.PS."
    "PbRange\022\023\n\013key_channel\030\010 \001(\005\022\026\n\007has_key\030"
    "\t \001(\010:\005false\022\027\n\017key_channel_str\030\n \001(\t\022\036\n"
    "\010key_type\030\r \001(\0162\014.PS.DataType\022 \n\nvalue_t"
    "ype\030\016 \003(\0162\014.PS.DataType\022 \n\006filter\030\014 \003(\0132"
    "\020.PS.FilterConfig\022\013\n\003msg\030\021 \001(\014\022 \n\010mng_no"
    "de\030\022 \001(\0132\016.PS.ManageNode\022\036\n\007mng_app\030\023 \001("
    "\0132\r.PS.ManageApp\022\'\n\013shared_para\030\024 \001(\0132\022."
    "PS.CallSharedPara\022\030\n\003sgd\030\025 \001(\0132\013.PS.SGDC"
    "all\022\030\n\003bcd\030\026 \001(\0132\013.PS.BCDCall\"h\n\004Type\022\r\n"
    "\tTERMINATE\020\001\022\025\n\021TERMINATE_CONFIRM\020\002\022\t\n\005R"
    "EPLY\020\003\022\n\n\006MANAGE\020\004\022\021\n\rCALL_CUSTOMER\020\005\022\020\n"
    "\014HEARTBEATING\020\006*\005\010d\020\310\001\"\217\001\n\nManageNode\022#\n"
    "\003cmd\030\001 \002(\0162\026.PS.ManageNode.Command\022\026\n\004no"
    "de\030\002 \003(\0132\010.PS.Node\"D\n\007Command\022\013\n\007CONNECT"
    "\020\001\022\007\n\003ADD\020\002\022\n\n\006UPDATE\020\003\022\013\n\007REPLACE\020\004\022\n\n\006"
    "REMOVE\020\005\"z\n\tManageApp\022\"\n\003cmd\030\001 \002(\0162\025.PS."
    "ManageApp.Command\022\014\n\004conf\030\002 \001(\t\";\n\007Comma"
    "nd\022\007\n\003ADD\020\001\022\n\n\006REMOVE\020\002\022\010\n\004INIT\020\004\022\007\n\003RUN"
    "\020\003\022\010\n\004DONE\020\005*\220\001\n\010DataType\022\t\n\005OTHER\020\000\022\010\n\004"
    "INT8\020\001\022\t\n\005INT16\020\002\022\t\n\005INT32\020\003\022\t\n\005INT64\020\004\022"
    "\t\n\005UINT8\020\005\022\n\n\006UINT16\020\006\022\n\n\006UINT32\020\007\022\n\n\006UI"
    "NT64\020\010\022\t\n\005FLOAT\020\t\022\n\n\006DOUBLE\020\n\022\010\n\004CHAR\020\013", 1239);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "system/proto/task.proto", &protobuf_RegisterTypes);
  Task::default_instance_ = new Task();
  ManageNode::default_instance_ = new ManageNode();
  ManageApp::default_instance_ = new ManageApp();
  Task::default_instance_->InitAsDefaultInstance();
  ManageNode::default_instance_->InitAsDefaultInstance();
  ManageApp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_system_2fproto_2ftask_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_system_2fproto_2ftask_2eproto {
  StaticDescriptorInitializer_system_2fproto_2ftask_2eproto() {
    protobuf_AddDesc_system_2fproto_2ftask_2eproto();
  }
} static_descriptor_initializer_system_2fproto_2ftask_2eproto_;
const ::google::protobuf::EnumDescriptor* DataType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DataType_descriptor_;
}
bool DataType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Task_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Task_Type_descriptor_;
}
bool Task_Type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Task_Type Task::TERMINATE;
const Task_Type Task::TERMINATE_CONFIRM;
const Task_Type Task::REPLY;
const Task_Type Task::MANAGE;
const Task_Type Task::CALL_CUSTOMER;
const Task_Type Task::HEARTBEATING;
const Task_Type Task::Type_MIN;
const Task_Type Task::Type_MAX;
const int Task::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Task::kTypeFieldNumber;
const int Task::kRequestFieldNumber;
const int Task::kCustomerFieldNumber;
const int Task::kTimeFieldNumber;
const int Task::kWaitTimeFieldNumber;
const int Task::kKeyRangeFieldNumber;
const int Task::kKeyChannelFieldNumber;
const int Task::kHasKeyFieldNumber;
const int Task::kKeyChannelStrFieldNumber;
const int Task::kKeyTypeFieldNumber;
const int Task::kValueTypeFieldNumber;
const int Task::kFilterFieldNumber;
const int Task::kMsgFieldNumber;
const int Task::kMngNodeFieldNumber;
const int Task::kMngAppFieldNumber;
const int Task::kSharedParaFieldNumber;
const int Task::kSgdFieldNumber;
const int Task::kBcdFieldNumber;
#endif  // !_MSC_VER

Task::Task()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Task::InitAsDefaultInstance() {
  key_range_ = const_cast< ::PS::PbRange*>(&::PS::PbRange::default_instance());
  mng_node_ = const_cast< ::PS::ManageNode*>(&::PS::ManageNode::default_instance());
  mng_app_ = const_cast< ::PS::ManageApp*>(&::PS::ManageApp::default_instance());
  shared_para_ = const_cast< ::PS::CallSharedPara*>(&::PS::CallSharedPara::default_instance());
  sgd_ = const_cast< ::PS::SGDCall*>(&::PS::SGDCall::default_instance());
  bcd_ = const_cast< ::PS::BCDCall*>(&::PS::BCDCall::default_instance());
}

Task::Task(const Task& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Task::SharedCtor() {
  _cached_size_ = 0;
  type_ = 5;
  request_ = false;
  customer_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  time_ = 0;
  key_range_ = NULL;
  key_channel_ = 0;
  has_key_ = false;
  key_channel_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  key_type_ = 0;
  msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  mng_node_ = NULL;
  mng_app_ = NULL;
  shared_para_ = NULL;
  sgd_ = NULL;
  bcd_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Task::~Task() {
  SharedDtor();
}

void Task::SharedDtor() {
  if (customer_ != &::google::protobuf::internal::kEmptyString) {
    delete customer_;
  }
  if (key_channel_str_ != &::google::protobuf::internal::kEmptyString) {
    delete key_channel_str_;
  }
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (this != default_instance_) {
    delete key_range_;
    delete mng_node_;
    delete mng_app_;
    delete shared_para_;
    delete sgd_;
    delete bcd_;
  }
}

void Task::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Task::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Task_descriptor_;
}

const Task& Task::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_system_2fproto_2ftask_2eproto();
  return *default_instance_;
}

Task* Task::default_instance_ = NULL;

Task* Task::New() const {
  return new Task;
}

void Task::Clear() {
  _extensions_.Clear();
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 5;
    request_ = false;
    if (has_customer()) {
      if (customer_ != &::google::protobuf::internal::kEmptyString) {
        customer_->clear();
      }
    }
    time_ = 0;
    if (has_key_range()) {
      if (key_range_ != NULL) key_range_->::PS::PbRange::Clear();
    }
    key_channel_ = 0;
    has_key_ = false;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_key_channel_str()) {
      if (key_channel_str_ != &::google::protobuf::internal::kEmptyString) {
        key_channel_str_->clear();
      }
    }
    key_type_ = 0;
    if (has_msg()) {
      if (msg_ != &::google::protobuf::internal::kEmptyString) {
        msg_->clear();
      }
    }
    if (has_mng_node()) {
      if (mng_node_ != NULL) mng_node_->::PS::ManageNode::Clear();
    }
    if (has_mng_app()) {
      if (mng_app_ != NULL) mng_app_->::PS::ManageApp::Clear();
    }
    if (has_shared_para()) {
      if (shared_para_ != NULL) shared_para_->::PS::CallSharedPara::Clear();
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_sgd()) {
      if (sgd_ != NULL) sgd_->::PS::SGDCall::Clear();
    }
    if (has_bcd()) {
      if (bcd_ != NULL) bcd_->::PS::BCDCall::Clear();
    }
  }
  wait_time_.Clear();
  value_type_.Clear();
  filter_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Task::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PS.Task.Type type = 1 [default = CALL_CUSTOMER];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PS::Task_Type_IsValid(value)) {
            set_type(static_cast< ::PS::Task_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_request;
        break;
      }

      // optional bool request = 2 [default = false];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_request:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &request_)));
          set_has_request();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_customer;
        break;
      }

      // optional string customer = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_customer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_customer()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->customer().data(), this->customer().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_time;
        break;
      }

      // optional int32 time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_wait_time;
        break;
      }

      // repeated int32 wait_time = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wait_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 48, input, this->mutable_wait_time())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_wait_time())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_wait_time;
        if (input->ExpectTag(58)) goto parse_key_range;
        break;
      }

      // optional .PS.PbRange key_range = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_key_range:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_key_range()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_key_channel;
        break;
      }

      // optional int32 key_channel = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_key_channel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &key_channel_)));
          set_has_key_channel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_has_key;
        break;
      }

      // optional bool has_key = 9 [default = false];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_has_key:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_key_)));
          set_has_has_key();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_key_channel_str;
        break;
      }

      // optional string key_channel_str = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_key_channel_str:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key_channel_str()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->key_channel_str().data(), this->key_channel_str().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_filter;
        break;
      }

      // repeated .PS.FilterConfig filter = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_filter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_filter()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_filter;
        if (input->ExpectTag(104)) goto parse_key_type;
        break;
      }

      // optional .PS.DataType key_type = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_key_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PS::DataType_IsValid(value)) {
            set_key_type(static_cast< ::PS::DataType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(13, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_value_type;
        break;
      }

      // repeated .PS.DataType value_type = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PS::DataType_IsValid(value)) {
            add_value_type(static_cast< ::PS::DataType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(14, value);
          }
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedEnumNoInline(
                 input,
                 &::PS::DataType_IsValid,
                 this->mutable_value_type())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_value_type;
        if (input->ExpectTag(138)) goto parse_msg;
        break;
      }

      // optional bytes msg = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_mng_node;
        break;
      }

      // optional .PS.ManageNode mng_node = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mng_node:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mng_node()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_mng_app;
        break;
      }

      // optional .PS.ManageApp mng_app = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mng_app:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mng_app()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_shared_para;
        break;
      }

      // optional .PS.CallSharedPara shared_para = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_shared_para:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_shared_para()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_sgd;
        break;
      }

      // optional .PS.SGDCall sgd = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sgd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sgd()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_bcd;
        break;
      }

      // optional .PS.BCDCall bcd = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bcd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bcd()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        if ((800u <= tag && tag < 1600u)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Task::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PS.Task.Type type = 1 [default = CALL_CUSTOMER];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional bool request = 2 [default = false];
  if (has_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->request(), output);
  }

  // optional string customer = 4;
  if (has_customer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->customer().data(), this->customer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->customer(), output);
  }

  // optional int32 time = 5;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->time(), output);
  }

  // repeated int32 wait_time = 6;
  for (int i = 0; i < this->wait_time_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      6, this->wait_time(i), output);
  }

  // optional .PS.PbRange key_range = 7;
  if (has_key_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->key_range(), output);
  }

  // optional int32 key_channel = 8;
  if (has_key_channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->key_channel(), output);
  }

  // optional bool has_key = 9 [default = false];
  if (has_has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->has_key(), output);
  }

  // optional string key_channel_str = 10;
  if (has_key_channel_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key_channel_str().data(), this->key_channel_str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->key_channel_str(), output);
  }

  // repeated .PS.FilterConfig filter = 12;
  for (int i = 0; i < this->filter_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->filter(i), output);
  }

  // optional .PS.DataType key_type = 13;
  if (has_key_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      13, this->key_type(), output);
  }

  // repeated .PS.DataType value_type = 14;
  for (int i = 0; i < this->value_type_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      14, this->value_type(i), output);
  }

  // optional bytes msg = 17;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      17, this->msg(), output);
  }

  // optional .PS.ManageNode mng_node = 18;
  if (has_mng_node()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->mng_node(), output);
  }

  // optional .PS.ManageApp mng_app = 19;
  if (has_mng_app()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, this->mng_app(), output);
  }

  // optional .PS.CallSharedPara shared_para = 20;
  if (has_shared_para()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->shared_para(), output);
  }

  // optional .PS.SGDCall sgd = 21;
  if (has_sgd()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->sgd(), output);
  }

  // optional .PS.BCDCall bcd = 22;
  if (has_bcd()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, this->bcd(), output);
  }

  // Extension range [100, 200)
  _extensions_.SerializeWithCachedSizes(
      100, 200, output);

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Task::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PS.Task.Type type = 1 [default = CALL_CUSTOMER];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional bool request = 2 [default = false];
  if (has_request()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->request(), target);
  }

  // optional string customer = 4;
  if (has_customer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->customer().data(), this->customer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->customer(), target);
  }

  // optional int32 time = 5;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->time(), target);
  }

  // repeated int32 wait_time = 6;
  for (int i = 0; i < this->wait_time_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(6, this->wait_time(i), target);
  }

  // optional .PS.PbRange key_range = 7;
  if (has_key_range()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->key_range(), target);
  }

  // optional int32 key_channel = 8;
  if (has_key_channel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->key_channel(), target);
  }

  // optional bool has_key = 9 [default = false];
  if (has_has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->has_key(), target);
  }

  // optional string key_channel_str = 10;
  if (has_key_channel_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key_channel_str().data(), this->key_channel_str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->key_channel_str(), target);
  }

  // repeated .PS.FilterConfig filter = 12;
  for (int i = 0; i < this->filter_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->filter(i), target);
  }

  // optional .PS.DataType key_type = 13;
  if (has_key_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      13, this->key_type(), target);
  }

  // repeated .PS.DataType value_type = 14;
  for (int i = 0; i < this->value_type_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      14, this->value_type(i), target);
  }

  // optional bytes msg = 17;
  if (has_msg()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        17, this->msg(), target);
  }

  // optional .PS.ManageNode mng_node = 18;
  if (has_mng_node()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        18, this->mng_node(), target);
  }

  // optional .PS.ManageApp mng_app = 19;
  if (has_mng_app()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        19, this->mng_app(), target);
  }

  // optional .PS.CallSharedPara shared_para = 20;
  if (has_shared_para()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->shared_para(), target);
  }

  // optional .PS.SGDCall sgd = 21;
  if (has_sgd()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        21, this->sgd(), target);
  }

  // optional .PS.BCDCall bcd = 22;
  if (has_bcd()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        22, this->bcd(), target);
  }

  // Extension range [100, 200)
  target = _extensions_.SerializeWithCachedSizesToArray(
      100, 200, target);

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Task::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PS.Task.Type type = 1 [default = CALL_CUSTOMER];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional bool request = 2 [default = false];
    if (has_request()) {
      total_size += 1 + 1;
    }

    // optional string customer = 4;
    if (has_customer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->customer());
    }

    // optional int32 time = 5;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time());
    }

    // optional .PS.PbRange key_range = 7;
    if (has_key_range()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->key_range());
    }

    // optional int32 key_channel = 8;
    if (has_key_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->key_channel());
    }

    // optional bool has_key = 9 [default = false];
    if (has_has_key()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string key_channel_str = 10;
    if (has_key_channel_str()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key_channel_str());
    }

    // optional .PS.DataType key_type = 13;
    if (has_key_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->key_type());
    }

    // optional bytes msg = 17;
    if (has_msg()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->msg());
    }

    // optional .PS.ManageNode mng_node = 18;
    if (has_mng_node()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mng_node());
    }

    // optional .PS.ManageApp mng_app = 19;
    if (has_mng_app()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mng_app());
    }

    // optional .PS.CallSharedPara shared_para = 20;
    if (has_shared_para()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->shared_para());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional .PS.SGDCall sgd = 21;
    if (has_sgd()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sgd());
    }

    // optional .PS.BCDCall bcd = 22;
    if (has_bcd()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bcd());
    }

  }
  // repeated int32 wait_time = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->wait_time_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->wait_time(i));
    }
    total_size += 1 * this->wait_time_size() + data_size;
  }

  // repeated .PS.DataType value_type = 14;
  {
    int data_size = 0;
    for (int i = 0; i < this->value_type_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->value_type(i));
    }
    total_size += 1 * this->value_type_size() + data_size;
  }

  // repeated .PS.FilterConfig filter = 12;
  total_size += 1 * this->filter_size();
  for (int i = 0; i < this->filter_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->filter(i));
  }

  total_size += _extensions_.ByteSize();

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Task::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Task* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Task*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Task::MergeFrom(const Task& from) {
  GOOGLE_CHECK_NE(&from, this);
  wait_time_.MergeFrom(from.wait_time_);
  value_type_.MergeFrom(from.value_type_);
  filter_.MergeFrom(from.filter_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_request()) {
      set_request(from.request());
    }
    if (from.has_customer()) {
      set_customer(from.customer());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_key_range()) {
      mutable_key_range()->::PS::PbRange::MergeFrom(from.key_range());
    }
    if (from.has_key_channel()) {
      set_key_channel(from.key_channel());
    }
    if (from.has_has_key()) {
      set_has_key(from.has_key());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_key_channel_str()) {
      set_key_channel_str(from.key_channel_str());
    }
    if (from.has_key_type()) {
      set_key_type(from.key_type());
    }
    if (from.has_msg()) {
      set_msg(from.msg());
    }
    if (from.has_mng_node()) {
      mutable_mng_node()->::PS::ManageNode::MergeFrom(from.mng_node());
    }
    if (from.has_mng_app()) {
      mutable_mng_app()->::PS::ManageApp::MergeFrom(from.mng_app());
    }
    if (from.has_shared_para()) {
      mutable_shared_para()->::PS::CallSharedPara::MergeFrom(from.shared_para());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_sgd()) {
      mutable_sgd()->::PS::SGDCall::MergeFrom(from.sgd());
    }
    if (from.has_bcd()) {
      mutable_bcd()->::PS::BCDCall::MergeFrom(from.bcd());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Task::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Task::CopyFrom(const Task& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Task::IsInitialized() const {

  if (has_key_range()) {
    if (!this->key_range().IsInitialized()) return false;
  }
  for (int i = 0; i < filter_size(); i++) {
    if (!this->filter(i).IsInitialized()) return false;
  }
  if (has_mng_node()) {
    if (!this->mng_node().IsInitialized()) return false;
  }
  if (has_mng_app()) {
    if (!this->mng_app().IsInitialized()) return false;
  }
  if (has_shared_para()) {
    if (!this->shared_para().IsInitialized()) return false;
  }
  if (has_sgd()) {
    if (!this->sgd().IsInitialized()) return false;
  }
  if (has_bcd()) {
    if (!this->bcd().IsInitialized()) return false;
  }

  if (!_extensions_.IsInitialized()) return false;  return true;
}

void Task::Swap(Task* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(request_, other->request_);
    std::swap(customer_, other->customer_);
    std::swap(time_, other->time_);
    wait_time_.Swap(&other->wait_time_);
    std::swap(key_range_, other->key_range_);
    std::swap(key_channel_, other->key_channel_);
    std::swap(has_key_, other->has_key_);
    std::swap(key_channel_str_, other->key_channel_str_);
    std::swap(key_type_, other->key_type_);
    value_type_.Swap(&other->value_type_);
    filter_.Swap(&other->filter_);
    std::swap(msg_, other->msg_);
    std::swap(mng_node_, other->mng_node_);
    std::swap(mng_app_, other->mng_app_);
    std::swap(shared_para_, other->shared_para_);
    std::swap(sgd_, other->sgd_);
    std::swap(bcd_, other->bcd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.Swap(&other->_extensions_);
  }
}

::google::protobuf::Metadata Task::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Task_descriptor_;
  metadata.reflection = Task_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ManageNode_Command_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ManageNode_Command_descriptor_;
}
bool ManageNode_Command_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ManageNode_Command ManageNode::CONNECT;
const ManageNode_Command ManageNode::ADD;
const ManageNode_Command ManageNode::UPDATE;
const ManageNode_Command ManageNode::REPLACE;
const ManageNode_Command ManageNode::REMOVE;
const ManageNode_Command ManageNode::Command_MIN;
const ManageNode_Command ManageNode::Command_MAX;
const int ManageNode::Command_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ManageNode::kCmdFieldNumber;
const int ManageNode::kNodeFieldNumber;
#endif  // !_MSC_VER

ManageNode::ManageNode()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ManageNode::InitAsDefaultInstance() {
}

ManageNode::ManageNode(const ManageNode& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ManageNode::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ManageNode::~ManageNode() {
  SharedDtor();
}

void ManageNode::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ManageNode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ManageNode::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ManageNode_descriptor_;
}

const ManageNode& ManageNode::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_system_2fproto_2ftask_2eproto();
  return *default_instance_;
}

ManageNode* ManageNode::default_instance_ = NULL;

ManageNode* ManageNode::New() const {
  return new ManageNode;
}

void ManageNode::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cmd_ = 1;
  }
  node_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ManageNode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .PS.ManageNode.Command cmd = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PS::ManageNode_Command_IsValid(value)) {
            set_cmd(static_cast< ::PS::ManageNode_Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_node;
        break;
      }

      // repeated .PS.Node node = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_node:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_node()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_node;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ManageNode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .PS.ManageNode.Command cmd = 1;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // repeated .PS.Node node = 2;
  for (int i = 0; i < this->node_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->node(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ManageNode::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .PS.ManageNode.Command cmd = 1;
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // repeated .PS.Node node = 2;
  for (int i = 0; i < this->node_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->node(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ManageNode::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .PS.ManageNode.Command cmd = 1;
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

  }
  // repeated .PS.Node node = 2;
  total_size += 1 * this->node_size();
  for (int i = 0; i < this->node_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->node(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ManageNode::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ManageNode* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ManageNode*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ManageNode::MergeFrom(const ManageNode& from) {
  GOOGLE_CHECK_NE(&from, this);
  node_.MergeFrom(from.node_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ManageNode::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ManageNode::CopyFrom(const ManageNode& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ManageNode::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < node_size(); i++) {
    if (!this->node(i).IsInitialized()) return false;
  }
  return true;
}

void ManageNode::Swap(ManageNode* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    node_.Swap(&other->node_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ManageNode::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ManageNode_descriptor_;
  metadata.reflection = ManageNode_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ManageApp_Command_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ManageApp_Command_descriptor_;
}
bool ManageApp_Command_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ManageApp_Command ManageApp::ADD;
const ManageApp_Command ManageApp::REMOVE;
const ManageApp_Command ManageApp::INIT;
const ManageApp_Command ManageApp::RUN;
const ManageApp_Command ManageApp::DONE;
const ManageApp_Command ManageApp::Command_MIN;
const ManageApp_Command ManageApp::Command_MAX;
const int ManageApp::Command_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ManageApp::kCmdFieldNumber;
const int ManageApp::kConfFieldNumber;
#endif  // !_MSC_VER

ManageApp::ManageApp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ManageApp::InitAsDefaultInstance() {
}

ManageApp::ManageApp(const ManageApp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ManageApp::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 1;
  conf_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ManageApp::~ManageApp() {
  SharedDtor();
}

void ManageApp::SharedDtor() {
  if (conf_ != &::google::protobuf::internal::kEmptyString) {
    delete conf_;
  }
  if (this != default_instance_) {
  }
}

void ManageApp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ManageApp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ManageApp_descriptor_;
}

const ManageApp& ManageApp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_system_2fproto_2ftask_2eproto();
  return *default_instance_;
}

ManageApp* ManageApp::default_instance_ = NULL;

ManageApp* ManageApp::New() const {
  return new ManageApp;
}

void ManageApp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cmd_ = 1;
    if (has_conf()) {
      if (conf_ != &::google::protobuf::internal::kEmptyString) {
        conf_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ManageApp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .PS.ManageApp.Command cmd = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PS::ManageApp_Command_IsValid(value)) {
            set_cmd(static_cast< ::PS::ManageApp_Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_conf;
        break;
      }

      // optional string conf = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_conf:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_conf()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->conf().data(), this->conf().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ManageApp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .PS.ManageApp.Command cmd = 1;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional string conf = 2;
  if (has_conf()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->conf().data(), this->conf().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->conf(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ManageApp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .PS.ManageApp.Command cmd = 1;
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional string conf = 2;
  if (has_conf()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->conf().data(), this->conf().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->conf(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ManageApp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .PS.ManageApp.Command cmd = 1;
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional string conf = 2;
    if (has_conf()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->conf());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ManageApp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ManageApp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ManageApp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ManageApp::MergeFrom(const ManageApp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_conf()) {
      set_conf(from.conf());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ManageApp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ManageApp::CopyFrom(const ManageApp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ManageApp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ManageApp::Swap(ManageApp* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(conf_, other->conf_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ManageApp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ManageApp_descriptor_;
  metadata.reflection = ManageApp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace PS

// @@protoc_insertion_point(global_scope)
