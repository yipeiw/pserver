// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: data/proto/example.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "data/proto/example.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace PS {

namespace {

const ::google::protobuf::Descriptor* SlotInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SlotInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* SlotInfo_Format_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ExampleInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExampleInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Slot_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Slot_reflection_ = NULL;
const ::google::protobuf::Descriptor* Example_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Example_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_data_2fproto_2fexample_2eproto() {
  protobuf_AddDesc_data_2fproto_2fexample_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "data/proto/example.proto");
  GOOGLE_CHECK(file != NULL);
  SlotInfo_descriptor_ = file->message_type(0);
  static const int SlotInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlotInfo, format_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlotInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlotInfo, min_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlotInfo, max_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlotInfo, nnz_ele_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlotInfo, nnz_ex_),
  };
  SlotInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SlotInfo_descriptor_,
      SlotInfo::default_instance_,
      SlotInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlotInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlotInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SlotInfo));
  SlotInfo_Format_descriptor_ = SlotInfo_descriptor_->enum_type(0);
  ExampleInfo_descriptor_ = file->message_type(1);
  static const int ExampleInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExampleInfo, slot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExampleInfo, num_ex_),
  };
  ExampleInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ExampleInfo_descriptor_,
      ExampleInfo::default_instance_,
      ExampleInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExampleInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExampleInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ExampleInfo));
  Slot_descriptor_ = file->message_type(2);
  static const int Slot_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Slot, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Slot, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Slot, val_),
  };
  Slot_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Slot_descriptor_,
      Slot::default_instance_,
      Slot_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Slot, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Slot, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Slot));
  Example_descriptor_ = file->message_type(3);
  static const int Example_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Example, slot_),
  };
  Example_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Example_descriptor_,
      Example::default_instance_,
      Example_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Example, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Example, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Example));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_data_2fproto_2fexample_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SlotInfo_descriptor_, &SlotInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ExampleInfo_descriptor_, &ExampleInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Slot_descriptor_, &Slot::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Example_descriptor_, &Example::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_data_2fproto_2fexample_2eproto() {
  delete SlotInfo::default_instance_;
  delete SlotInfo_reflection_;
  delete ExampleInfo::default_instance_;
  delete ExampleInfo_reflection_;
  delete Slot::default_instance_;
  delete Slot_reflection_;
  delete Example::default_instance_;
  delete Example_reflection_;
}

void protobuf_AddDesc_data_2fproto_2fexample_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\030data/proto/example.proto\022\002PS\"\310\001\n\010SlotI"
    "nfo\022#\n\006format\030\001 \001(\0162\023.PS.SlotInfo.Format"
    "\022\n\n\002id\030\002 \001(\005\022%\n\007min_key\030\003 \001(\004:\024184467440"
    "73709551615\022\017\n\007max_key\030\004 \001(\004\022\017\n\007nnz_ele\030"
    "\005 \001(\004\022\016\n\006nnz_ex\030\006 \001(\004\"2\n\006Format\022\t\n\005DENSE"
    "\020\001\022\n\n\006SPARSE\020\002\022\021\n\rSPARSE_BINARY\020\003\"9\n\013Exa"
    "mpleInfo\022\032\n\004slot\030\001 \003(\0132\014.PS.SlotInfo\022\016\n\006"
    "num_ex\030\002 \001(\004\"4\n\004Slot\022\n\n\002id\030\001 \001(\005\022\017\n\003key\030"
    "\002 \003(\004B\002\020\001\022\017\n\003val\030\003 \003(\002B\002\020\001\"!\n\007Example\022\026\n"
    "\004slot\030\001 \003(\0132\010.PS.Slot", 381);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "data/proto/example.proto", &protobuf_RegisterTypes);
  SlotInfo::default_instance_ = new SlotInfo();
  ExampleInfo::default_instance_ = new ExampleInfo();
  Slot::default_instance_ = new Slot();
  Example::default_instance_ = new Example();
  SlotInfo::default_instance_->InitAsDefaultInstance();
  ExampleInfo::default_instance_->InitAsDefaultInstance();
  Slot::default_instance_->InitAsDefaultInstance();
  Example::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_data_2fproto_2fexample_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_data_2fproto_2fexample_2eproto {
  StaticDescriptorInitializer_data_2fproto_2fexample_2eproto() {
    protobuf_AddDesc_data_2fproto_2fexample_2eproto();
  }
} static_descriptor_initializer_data_2fproto_2fexample_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* SlotInfo_Format_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SlotInfo_Format_descriptor_;
}
bool SlotInfo_Format_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const SlotInfo_Format SlotInfo::DENSE;
const SlotInfo_Format SlotInfo::SPARSE;
const SlotInfo_Format SlotInfo::SPARSE_BINARY;
const SlotInfo_Format SlotInfo::Format_MIN;
const SlotInfo_Format SlotInfo::Format_MAX;
const int SlotInfo::Format_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int SlotInfo::kFormatFieldNumber;
const int SlotInfo::kIdFieldNumber;
const int SlotInfo::kMinKeyFieldNumber;
const int SlotInfo::kMaxKeyFieldNumber;
const int SlotInfo::kNnzEleFieldNumber;
const int SlotInfo::kNnzExFieldNumber;
#endif  // !_MSC_VER

SlotInfo::SlotInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SlotInfo::InitAsDefaultInstance() {
}

SlotInfo::SlotInfo(const SlotInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SlotInfo::SharedCtor() {
  _cached_size_ = 0;
  format_ = 1;
  id_ = 0;
  min_key_ = GOOGLE_ULONGLONG(18446744073709551615);
  max_key_ = GOOGLE_ULONGLONG(0);
  nnz_ele_ = GOOGLE_ULONGLONG(0);
  nnz_ex_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SlotInfo::~SlotInfo() {
  SharedDtor();
}

void SlotInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SlotInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SlotInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SlotInfo_descriptor_;
}

const SlotInfo& SlotInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_2fproto_2fexample_2eproto();
  return *default_instance_;
}

SlotInfo* SlotInfo::default_instance_ = NULL;

SlotInfo* SlotInfo::New() const {
  return new SlotInfo;
}

void SlotInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    format_ = 1;
    id_ = 0;
    min_key_ = GOOGLE_ULONGLONG(18446744073709551615);
    max_key_ = GOOGLE_ULONGLONG(0);
    nnz_ele_ = GOOGLE_ULONGLONG(0);
    nnz_ex_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SlotInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PS.SlotInfo.Format format = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PS::SlotInfo_Format_IsValid(value)) {
            set_format(static_cast< ::PS::SlotInfo_Format >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_min_key;
        break;
      }

      // optional uint64 min_key = 3 [default = 18446744073709551615];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_min_key:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &min_key_)));
          set_has_min_key();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_max_key;
        break;
      }

      // optional uint64 max_key = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_key:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &max_key_)));
          set_has_max_key();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_nnz_ele;
        break;
      }

      // optional uint64 nnz_ele = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nnz_ele:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &nnz_ele_)));
          set_has_nnz_ele();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_nnz_ex;
        break;
      }

      // optional uint64 nnz_ex = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nnz_ex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &nnz_ex_)));
          set_has_nnz_ex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SlotInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PS.SlotInfo.Format format = 1;
  if (has_format()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->format(), output);
  }

  // optional int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  // optional uint64 min_key = 3 [default = 18446744073709551615];
  if (has_min_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->min_key(), output);
  }

  // optional uint64 max_key = 4;
  if (has_max_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->max_key(), output);
  }

  // optional uint64 nnz_ele = 5;
  if (has_nnz_ele()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->nnz_ele(), output);
  }

  // optional uint64 nnz_ex = 6;
  if (has_nnz_ex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->nnz_ex(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SlotInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PS.SlotInfo.Format format = 1;
  if (has_format()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->format(), target);
  }

  // optional int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  // optional uint64 min_key = 3 [default = 18446744073709551615];
  if (has_min_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->min_key(), target);
  }

  // optional uint64 max_key = 4;
  if (has_max_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->max_key(), target);
  }

  // optional uint64 nnz_ele = 5;
  if (has_nnz_ele()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->nnz_ele(), target);
  }

  // optional uint64 nnz_ex = 6;
  if (has_nnz_ex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->nnz_ex(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SlotInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PS.SlotInfo.Format format = 1;
    if (has_format()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->format());
    }

    // optional int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional uint64 min_key = 3 [default = 18446744073709551615];
    if (has_min_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->min_key());
    }

    // optional uint64 max_key = 4;
    if (has_max_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->max_key());
    }

    // optional uint64 nnz_ele = 5;
    if (has_nnz_ele()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->nnz_ele());
    }

    // optional uint64 nnz_ex = 6;
    if (has_nnz_ex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->nnz_ex());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SlotInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SlotInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SlotInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SlotInfo::MergeFrom(const SlotInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_format()) {
      set_format(from.format());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_min_key()) {
      set_min_key(from.min_key());
    }
    if (from.has_max_key()) {
      set_max_key(from.max_key());
    }
    if (from.has_nnz_ele()) {
      set_nnz_ele(from.nnz_ele());
    }
    if (from.has_nnz_ex()) {
      set_nnz_ex(from.nnz_ex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SlotInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SlotInfo::CopyFrom(const SlotInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SlotInfo::IsInitialized() const {

  return true;
}

void SlotInfo::Swap(SlotInfo* other) {
  if (other != this) {
    std::swap(format_, other->format_);
    std::swap(id_, other->id_);
    std::swap(min_key_, other->min_key_);
    std::swap(max_key_, other->max_key_);
    std::swap(nnz_ele_, other->nnz_ele_);
    std::swap(nnz_ex_, other->nnz_ex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SlotInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SlotInfo_descriptor_;
  metadata.reflection = SlotInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ExampleInfo::kSlotFieldNumber;
const int ExampleInfo::kNumExFieldNumber;
#endif  // !_MSC_VER

ExampleInfo::ExampleInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ExampleInfo::InitAsDefaultInstance() {
}

ExampleInfo::ExampleInfo(const ExampleInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ExampleInfo::SharedCtor() {
  _cached_size_ = 0;
  num_ex_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExampleInfo::~ExampleInfo() {
  SharedDtor();
}

void ExampleInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ExampleInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExampleInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExampleInfo_descriptor_;
}

const ExampleInfo& ExampleInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_2fproto_2fexample_2eproto();
  return *default_instance_;
}

ExampleInfo* ExampleInfo::default_instance_ = NULL;

ExampleInfo* ExampleInfo::New() const {
  return new ExampleInfo;
}

void ExampleInfo::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    num_ex_ = GOOGLE_ULONGLONG(0);
  }
  slot_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ExampleInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PS.SlotInfo slot = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_slot:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_slot()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_slot;
        if (input->ExpectTag(16)) goto parse_num_ex;
        break;
      }

      // optional uint64 num_ex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num_ex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &num_ex_)));
          set_has_num_ex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ExampleInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PS.SlotInfo slot = 1;
  for (int i = 0; i < this->slot_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->slot(i), output);
  }

  // optional uint64 num_ex = 2;
  if (has_num_ex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->num_ex(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ExampleInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PS.SlotInfo slot = 1;
  for (int i = 0; i < this->slot_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->slot(i), target);
  }

  // optional uint64 num_ex = 2;
  if (has_num_ex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->num_ex(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ExampleInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint64 num_ex = 2;
    if (has_num_ex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->num_ex());
    }

  }
  // repeated .PS.SlotInfo slot = 1;
  total_size += 1 * this->slot_size();
  for (int i = 0; i < this->slot_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->slot(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExampleInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ExampleInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExampleInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExampleInfo::MergeFrom(const ExampleInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  slot_.MergeFrom(from.slot_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_num_ex()) {
      set_num_ex(from.num_ex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ExampleInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExampleInfo::CopyFrom(const ExampleInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExampleInfo::IsInitialized() const {

  return true;
}

void ExampleInfo::Swap(ExampleInfo* other) {
  if (other != this) {
    slot_.Swap(&other->slot_);
    std::swap(num_ex_, other->num_ex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ExampleInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExampleInfo_descriptor_;
  metadata.reflection = ExampleInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Slot::kIdFieldNumber;
const int Slot::kKeyFieldNumber;
const int Slot::kValFieldNumber;
#endif  // !_MSC_VER

Slot::Slot()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Slot::InitAsDefaultInstance() {
}

Slot::Slot(const Slot& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Slot::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Slot::~Slot() {
  SharedDtor();
}

void Slot::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Slot::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Slot::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Slot_descriptor_;
}

const Slot& Slot::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_2fproto_2fexample_2eproto();
  return *default_instance_;
}

Slot* Slot::default_instance_ = NULL;

Slot* Slot::New() const {
  return new Slot;
}

void Slot::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
  }
  key_.Clear();
  val_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Slot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_key;
        break;
      }

      // repeated uint64 key = 2 [packed = true];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_key:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_key())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 18, input, this->mutable_key())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_val;
        break;
      }

      // repeated float val = 3 [packed = true];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_val:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_val())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 26, input, this->mutable_val())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Slot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // repeated uint64 key = 2 [packed = true];
  if (this->key_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_key_cached_byte_size_);
  }
  for (int i = 0; i < this->key_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64NoTag(
      this->key(i), output);
  }

  // repeated float val = 3 [packed = true];
  if (this->val_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_val_cached_byte_size_);
  }
  for (int i = 0; i < this->val_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloatNoTag(
      this->val(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Slot::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // repeated uint64 key = 2 [packed = true];
  if (this->key_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _key_cached_byte_size_, target);
  }
  for (int i = 0; i < this->key_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64NoTagToArray(this->key(i), target);
  }

  // repeated float val = 3 [packed = true];
  if (this->val_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _val_cached_byte_size_, target);
  }
  for (int i = 0; i < this->val_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->val(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Slot::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  // repeated uint64 key = 2 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->key_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->key(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _key_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated float val = 3 [packed = true];
  {
    int data_size = 0;
    data_size = 4 * this->val_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _val_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Slot::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Slot* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Slot*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Slot::MergeFrom(const Slot& from) {
  GOOGLE_CHECK_NE(&from, this);
  key_.MergeFrom(from.key_);
  val_.MergeFrom(from.val_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Slot::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Slot::CopyFrom(const Slot& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Slot::IsInitialized() const {

  return true;
}

void Slot::Swap(Slot* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    key_.Swap(&other->key_);
    val_.Swap(&other->val_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Slot::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Slot_descriptor_;
  metadata.reflection = Slot_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Example::kSlotFieldNumber;
#endif  // !_MSC_VER

Example::Example()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Example::InitAsDefaultInstance() {
}

Example::Example(const Example& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Example::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Example::~Example() {
  SharedDtor();
}

void Example::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Example::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Example::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Example_descriptor_;
}

const Example& Example::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_2fproto_2fexample_2eproto();
  return *default_instance_;
}

Example* Example::default_instance_ = NULL;

Example* Example::New() const {
  return new Example;
}

void Example::Clear() {
  slot_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Example::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PS.Slot slot = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_slot:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_slot()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_slot;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Example::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PS.Slot slot = 1;
  for (int i = 0; i < this->slot_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->slot(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Example::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PS.Slot slot = 1;
  for (int i = 0; i < this->slot_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->slot(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Example::ByteSize() const {
  int total_size = 0;

  // repeated .PS.Slot slot = 1;
  total_size += 1 * this->slot_size();
  for (int i = 0; i < this->slot_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->slot(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Example::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Example* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Example*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Example::MergeFrom(const Example& from) {
  GOOGLE_CHECK_NE(&from, this);
  slot_.MergeFrom(from.slot_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Example::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Example::CopyFrom(const Example& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Example::IsInitialized() const {

  return true;
}

void Example::Swap(Example* other) {
  if (other != this) {
    slot_.Swap(&other->slot_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Example::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Example_descriptor_;
  metadata.reflection = Example_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace PS

// @@protoc_insertion_point(global_scope)
