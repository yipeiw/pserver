// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: parameter/proto/param.proto

#ifndef PROTOBUF_parameter_2fproto_2fparam_2eproto__INCLUDED
#define PROTOBUF_parameter_2fproto_2fparam_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace PS {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_parameter_2fproto_2fparam_2eproto();
void protobuf_AssignDesc_parameter_2fproto_2fparam_2eproto();
void protobuf_ShutdownFile_parameter_2fproto_2fparam_2eproto();

class ParameterInitConfig;
class Timestamp;
class TailKeyFilter;
class CallSharedPara;

enum ParameterInitConfig_Type {
  ParameterInitConfig_Type_ZERO = 1,
  ParameterInitConfig_Type_CONSTANT = 2,
  ParameterInitConfig_Type_GAUSSIAN = 3,
  ParameterInitConfig_Type_FILE = 4,
  ParameterInitConfig_Type_CLONE = 5
};
bool ParameterInitConfig_Type_IsValid(int value);
const ParameterInitConfig_Type ParameterInitConfig_Type_Type_MIN = ParameterInitConfig_Type_ZERO;
const ParameterInitConfig_Type ParameterInitConfig_Type_Type_MAX = ParameterInitConfig_Type_CLONE;
const int ParameterInitConfig_Type_Type_ARRAYSIZE = ParameterInitConfig_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* ParameterInitConfig_Type_descriptor();
inline const ::std::string& ParameterInitConfig_Type_Name(ParameterInitConfig_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    ParameterInitConfig_Type_descriptor(), value);
}
inline bool ParameterInitConfig_Type_Parse(
    const ::std::string& name, ParameterInitConfig_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ParameterInitConfig_Type>(
    ParameterInitConfig_Type_descriptor(), name, value);
}
enum CallSharedPara_Command {
  CallSharedPara_Command_PUSH = 1,
  CallSharedPara_Command_PULL = 2
};
bool CallSharedPara_Command_IsValid(int value);
const CallSharedPara_Command CallSharedPara_Command_Command_MIN = CallSharedPara_Command_PUSH;
const CallSharedPara_Command CallSharedPara_Command_Command_MAX = CallSharedPara_Command_PULL;
const int CallSharedPara_Command_Command_ARRAYSIZE = CallSharedPara_Command_Command_MAX + 1;

const ::google::protobuf::EnumDescriptor* CallSharedPara_Command_descriptor();
inline const ::std::string& CallSharedPara_Command_Name(CallSharedPara_Command value) {
  return ::google::protobuf::internal::NameOfEnum(
    CallSharedPara_Command_descriptor(), value);
}
inline bool CallSharedPara_Command_Parse(
    const ::std::string& name, CallSharedPara_Command* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CallSharedPara_Command>(
    CallSharedPara_Command_descriptor(), name, value);
}
enum Operator {
  PLUS = 0,
  MINUS = 1,
  TIMES = 2,
  DIVIDE = 3,
  AND = 4,
  OR = 5,
  XOR = 6
};
bool Operator_IsValid(int value);
const Operator Operator_MIN = PLUS;
const Operator Operator_MAX = XOR;
const int Operator_ARRAYSIZE = Operator_MAX + 1;

const ::google::protobuf::EnumDescriptor* Operator_descriptor();
inline const ::std::string& Operator_Name(Operator value) {
  return ::google::protobuf::internal::NameOfEnum(
    Operator_descriptor(), value);
}
inline bool Operator_Parse(
    const ::std::string& name, Operator* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Operator>(
    Operator_descriptor(), name, value);
}
// ===================================================================

class ParameterInitConfig : public ::google::protobuf::Message {
 public:
  ParameterInitConfig();
  virtual ~ParameterInitConfig();

  ParameterInitConfig(const ParameterInitConfig& from);

  inline ParameterInitConfig& operator=(const ParameterInitConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ParameterInitConfig& default_instance();

  void Swap(ParameterInitConfig* other);

  // implements Message ----------------------------------------------

  ParameterInitConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ParameterInitConfig& from);
  void MergeFrom(const ParameterInitConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ParameterInitConfig_Type Type;
  static const Type ZERO = ParameterInitConfig_Type_ZERO;
  static const Type CONSTANT = ParameterInitConfig_Type_CONSTANT;
  static const Type GAUSSIAN = ParameterInitConfig_Type_GAUSSIAN;
  static const Type FILE = ParameterInitConfig_Type_FILE;
  static const Type CLONE = ParameterInitConfig_Type_CLONE;
  static inline bool Type_IsValid(int value) {
    return ParameterInitConfig_Type_IsValid(value);
  }
  static const Type Type_MIN =
    ParameterInitConfig_Type_Type_MIN;
  static const Type Type_MAX =
    ParameterInitConfig_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    ParameterInitConfig_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return ParameterInitConfig_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return ParameterInitConfig_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return ParameterInitConfig_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .PS.ParameterInitConfig.Type type = 1 [default = ZERO];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PS::ParameterInitConfig_Type type() const;
  inline void set_type(::PS::ParameterInitConfig_Type value);

  // optional double constant = 2 [default = 1];
  inline bool has_constant() const;
  inline void clear_constant();
  static const int kConstantFieldNumber = 2;
  inline double constant() const;
  inline void set_constant(double value);

  // optional double mean = 3 [default = 0];
  inline bool has_mean() const;
  inline void clear_mean();
  static const int kMeanFieldNumber = 3;
  inline double mean() const;
  inline void set_mean(double value);

  // optional double std = 4 [default = 1];
  inline bool has_std() const;
  inline void clear_std();
  static const int kStdFieldNumber = 4;
  inline double std() const;
  inline void set_std(double value);

  // optional string file_name = 5;
  inline bool has_file_name() const;
  inline void clear_file_name();
  static const int kFileNameFieldNumber = 5;
  inline const ::std::string& file_name() const;
  inline void set_file_name(const ::std::string& value);
  inline void set_file_name(const char* value);
  inline void set_file_name(const char* value, size_t size);
  inline ::std::string* mutable_file_name();
  inline ::std::string* release_file_name();
  inline void set_allocated_file_name(::std::string* file_name);

  // @@protoc_insertion_point(class_scope:PS.ParameterInitConfig)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_constant();
  inline void clear_has_constant();
  inline void set_has_mean();
  inline void clear_has_mean();
  inline void set_has_std();
  inline void clear_has_std();
  inline void set_has_file_name();
  inline void clear_has_file_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  double constant_;
  double mean_;
  double std_;
  ::std::string* file_name_;
  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_parameter_2fproto_2fparam_2eproto();
  friend void protobuf_AssignDesc_parameter_2fproto_2fparam_2eproto();
  friend void protobuf_ShutdownFile_parameter_2fproto_2fparam_2eproto();

  void InitAsDefaultInstance();
  static ParameterInitConfig* default_instance_;
};
// -------------------------------------------------------------------

class Timestamp : public ::google::protobuf::Message {
 public:
  Timestamp();
  virtual ~Timestamp();

  Timestamp(const Timestamp& from);

  inline Timestamp& operator=(const Timestamp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Timestamp& default_instance();

  void Swap(Timestamp* other);

  // implements Message ----------------------------------------------

  Timestamp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Timestamp& from);
  void MergeFrom(const Timestamp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string sender = 1;
  inline bool has_sender() const;
  inline void clear_sender();
  static const int kSenderFieldNumber = 1;
  inline const ::std::string& sender() const;
  inline void set_sender(const ::std::string& value);
  inline void set_sender(const char* value);
  inline void set_sender(const char* value, size_t size);
  inline ::std::string* mutable_sender();
  inline ::std::string* release_sender();
  inline void set_allocated_sender(::std::string* sender);

  // required int32 time = 2;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 2;
  inline ::google::protobuf::int32 time() const;
  inline void set_time(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PS.Timestamp)
 private:
  inline void set_has_sender();
  inline void clear_has_sender();
  inline void set_has_time();
  inline void clear_has_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* sender_;
  ::google::protobuf::int32 time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_parameter_2fproto_2fparam_2eproto();
  friend void protobuf_AssignDesc_parameter_2fproto_2fparam_2eproto();
  friend void protobuf_ShutdownFile_parameter_2fproto_2fparam_2eproto();

  void InitAsDefaultInstance();
  static Timestamp* default_instance_;
};
// -------------------------------------------------------------------

class TailKeyFilter : public ::google::protobuf::Message {
 public:
  TailKeyFilter();
  virtual ~TailKeyFilter();

  TailKeyFilter(const TailKeyFilter& from);

  inline TailKeyFilter& operator=(const TailKeyFilter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TailKeyFilter& default_instance();

  void Swap(TailKeyFilter* other);

  // implements Message ----------------------------------------------

  TailKeyFilter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TailKeyFilter& from);
  void MergeFrom(const TailKeyFilter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool insert_count = 1;
  inline bool has_insert_count() const;
  inline void clear_insert_count();
  static const int kInsertCountFieldNumber = 1;
  inline bool insert_count() const;
  inline void set_insert_count(bool value);

  // optional int32 query_key = 2;
  inline bool has_query_key() const;
  inline void clear_query_key();
  static const int kQueryKeyFieldNumber = 2;
  inline ::google::protobuf::int32 query_key() const;
  inline void set_query_key(::google::protobuf::int32 value);

  // optional bool query_value = 3;
  inline bool has_query_value() const;
  inline void clear_query_value();
  static const int kQueryValueFieldNumber = 3;
  inline bool query_value() const;
  inline void set_query_value(bool value);

  // optional int32 countmin_n = 4;
  inline bool has_countmin_n() const;
  inline void clear_countmin_n();
  static const int kCountminNFieldNumber = 4;
  inline ::google::protobuf::int32 countmin_n() const;
  inline void set_countmin_n(::google::protobuf::int32 value);

  // optional int32 countmin_k = 5;
  inline bool has_countmin_k() const;
  inline void clear_countmin_k();
  static const int kCountminKFieldNumber = 5;
  inline ::google::protobuf::int32 countmin_k() const;
  inline void set_countmin_k(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PS.TailKeyFilter)
 private:
  inline void set_has_insert_count();
  inline void clear_has_insert_count();
  inline void set_has_query_key();
  inline void clear_has_query_key();
  inline void set_has_query_value();
  inline void clear_has_query_value();
  inline void set_has_countmin_n();
  inline void clear_has_countmin_n();
  inline void set_has_countmin_k();
  inline void clear_has_countmin_k();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 query_key_;
  bool insert_count_;
  bool query_value_;
  ::google::protobuf::int32 countmin_n_;
  ::google::protobuf::int32 countmin_k_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_parameter_2fproto_2fparam_2eproto();
  friend void protobuf_AssignDesc_parameter_2fproto_2fparam_2eproto();
  friend void protobuf_ShutdownFile_parameter_2fproto_2fparam_2eproto();

  void InitAsDefaultInstance();
  static TailKeyFilter* default_instance_;
};
// -------------------------------------------------------------------

class CallSharedPara : public ::google::protobuf::Message {
 public:
  CallSharedPara();
  virtual ~CallSharedPara();

  CallSharedPara(const CallSharedPara& from);

  inline CallSharedPara& operator=(const CallSharedPara& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CallSharedPara& default_instance();

  void Swap(CallSharedPara* other);

  // implements Message ----------------------------------------------

  CallSharedPara* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CallSharedPara& from);
  void MergeFrom(const CallSharedPara& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CallSharedPara_Command Command;
  static const Command PUSH = CallSharedPara_Command_PUSH;
  static const Command PULL = CallSharedPara_Command_PULL;
  static inline bool Command_IsValid(int value) {
    return CallSharedPara_Command_IsValid(value);
  }
  static const Command Command_MIN =
    CallSharedPara_Command_Command_MIN;
  static const Command Command_MAX =
    CallSharedPara_Command_Command_MAX;
  static const int Command_ARRAYSIZE =
    CallSharedPara_Command_Command_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Command_descriptor() {
    return CallSharedPara_Command_descriptor();
  }
  static inline const ::std::string& Command_Name(Command value) {
    return CallSharedPara_Command_Name(value);
  }
  static inline bool Command_Parse(const ::std::string& name,
      Command* value) {
    return CallSharedPara_Command_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .PS.CallSharedPara.Command cmd = 1;
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::PS::CallSharedPara_Command cmd() const;
  inline void set_cmd(::PS::CallSharedPara_Command value);

  // optional .PS.Operator op = 2;
  inline bool has_op() const;
  inline void clear_op();
  static const int kOpFieldNumber = 2;
  inline ::PS::Operator op() const;
  inline void set_op(::PS::Operator value);

  // optional .PS.TailKeyFilter tail_filter = 3;
  inline bool has_tail_filter() const;
  inline void clear_tail_filter();
  static const int kTailFilterFieldNumber = 3;
  inline const ::PS::TailKeyFilter& tail_filter() const;
  inline ::PS::TailKeyFilter* mutable_tail_filter();
  inline ::PS::TailKeyFilter* release_tail_filter();
  inline void set_allocated_tail_filter(::PS::TailKeyFilter* tail_filter);

  // optional bool insert_key = 5;
  inline bool has_insert_key() const;
  inline void clear_insert_key();
  static const int kInsertKeyFieldNumber = 5;
  inline bool insert_key() const;
  inline void set_insert_key(bool value);

  // optional bool gather = 6;
  inline bool has_gather() const;
  inline void clear_gather();
  static const int kGatherFieldNumber = 6;
  inline bool gather() const;
  inline void set_gather(bool value);

  // optional bool replica = 10;
  inline bool has_replica() const;
  inline void clear_replica();
  static const int kReplicaFieldNumber = 10;
  inline bool replica() const;
  inline void set_replica(bool value);

  // repeated .PS.Timestamp backup = 11;
  inline int backup_size() const;
  inline void clear_backup();
  static const int kBackupFieldNumber = 11;
  inline const ::PS::Timestamp& backup(int index) const;
  inline ::PS::Timestamp* mutable_backup(int index);
  inline ::PS::Timestamp* add_backup();
  inline const ::google::protobuf::RepeatedPtrField< ::PS::Timestamp >&
      backup() const;
  inline ::google::protobuf::RepeatedPtrField< ::PS::Timestamp >*
      mutable_backup();

  // @@protoc_insertion_point(class_scope:PS.CallSharedPara)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_op();
  inline void clear_has_op();
  inline void set_has_tail_filter();
  inline void clear_has_tail_filter();
  inline void set_has_insert_key();
  inline void clear_has_insert_key();
  inline void set_has_gather();
  inline void clear_has_gather();
  inline void set_has_replica();
  inline void clear_has_replica();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int cmd_;
  int op_;
  ::PS::TailKeyFilter* tail_filter_;
  ::google::protobuf::RepeatedPtrField< ::PS::Timestamp > backup_;
  bool insert_key_;
  bool gather_;
  bool replica_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_parameter_2fproto_2fparam_2eproto();
  friend void protobuf_AssignDesc_parameter_2fproto_2fparam_2eproto();
  friend void protobuf_ShutdownFile_parameter_2fproto_2fparam_2eproto();

  void InitAsDefaultInstance();
  static CallSharedPara* default_instance_;
};
// ===================================================================


// ===================================================================

// ParameterInitConfig

// optional .PS.ParameterInitConfig.Type type = 1 [default = ZERO];
inline bool ParameterInitConfig::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ParameterInitConfig::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ParameterInitConfig::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ParameterInitConfig::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::PS::ParameterInitConfig_Type ParameterInitConfig::type() const {
  return static_cast< ::PS::ParameterInitConfig_Type >(type_);
}
inline void ParameterInitConfig::set_type(::PS::ParameterInitConfig_Type value) {
  assert(::PS::ParameterInitConfig_Type_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional double constant = 2 [default = 1];
inline bool ParameterInitConfig::has_constant() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ParameterInitConfig::set_has_constant() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ParameterInitConfig::clear_has_constant() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ParameterInitConfig::clear_constant() {
  constant_ = 1;
  clear_has_constant();
}
inline double ParameterInitConfig::constant() const {
  return constant_;
}
inline void ParameterInitConfig::set_constant(double value) {
  set_has_constant();
  constant_ = value;
}

// optional double mean = 3 [default = 0];
inline bool ParameterInitConfig::has_mean() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ParameterInitConfig::set_has_mean() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ParameterInitConfig::clear_has_mean() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ParameterInitConfig::clear_mean() {
  mean_ = 0;
  clear_has_mean();
}
inline double ParameterInitConfig::mean() const {
  return mean_;
}
inline void ParameterInitConfig::set_mean(double value) {
  set_has_mean();
  mean_ = value;
}

// optional double std = 4 [default = 1];
inline bool ParameterInitConfig::has_std() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ParameterInitConfig::set_has_std() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ParameterInitConfig::clear_has_std() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ParameterInitConfig::clear_std() {
  std_ = 1;
  clear_has_std();
}
inline double ParameterInitConfig::std() const {
  return std_;
}
inline void ParameterInitConfig::set_std(double value) {
  set_has_std();
  std_ = value;
}

// optional string file_name = 5;
inline bool ParameterInitConfig::has_file_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ParameterInitConfig::set_has_file_name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ParameterInitConfig::clear_has_file_name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ParameterInitConfig::clear_file_name() {
  if (file_name_ != &::google::protobuf::internal::kEmptyString) {
    file_name_->clear();
  }
  clear_has_file_name();
}
inline const ::std::string& ParameterInitConfig::file_name() const {
  return *file_name_;
}
inline void ParameterInitConfig::set_file_name(const ::std::string& value) {
  set_has_file_name();
  if (file_name_ == &::google::protobuf::internal::kEmptyString) {
    file_name_ = new ::std::string;
  }
  file_name_->assign(value);
}
inline void ParameterInitConfig::set_file_name(const char* value) {
  set_has_file_name();
  if (file_name_ == &::google::protobuf::internal::kEmptyString) {
    file_name_ = new ::std::string;
  }
  file_name_->assign(value);
}
inline void ParameterInitConfig::set_file_name(const char* value, size_t size) {
  set_has_file_name();
  if (file_name_ == &::google::protobuf::internal::kEmptyString) {
    file_name_ = new ::std::string;
  }
  file_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ParameterInitConfig::mutable_file_name() {
  set_has_file_name();
  if (file_name_ == &::google::protobuf::internal::kEmptyString) {
    file_name_ = new ::std::string;
  }
  return file_name_;
}
inline ::std::string* ParameterInitConfig::release_file_name() {
  clear_has_file_name();
  if (file_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = file_name_;
    file_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ParameterInitConfig::set_allocated_file_name(::std::string* file_name) {
  if (file_name_ != &::google::protobuf::internal::kEmptyString) {
    delete file_name_;
  }
  if (file_name) {
    set_has_file_name();
    file_name_ = file_name;
  } else {
    clear_has_file_name();
    file_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Timestamp

// required string sender = 1;
inline bool Timestamp::has_sender() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Timestamp::set_has_sender() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Timestamp::clear_has_sender() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Timestamp::clear_sender() {
  if (sender_ != &::google::protobuf::internal::kEmptyString) {
    sender_->clear();
  }
  clear_has_sender();
}
inline const ::std::string& Timestamp::sender() const {
  return *sender_;
}
inline void Timestamp::set_sender(const ::std::string& value) {
  set_has_sender();
  if (sender_ == &::google::protobuf::internal::kEmptyString) {
    sender_ = new ::std::string;
  }
  sender_->assign(value);
}
inline void Timestamp::set_sender(const char* value) {
  set_has_sender();
  if (sender_ == &::google::protobuf::internal::kEmptyString) {
    sender_ = new ::std::string;
  }
  sender_->assign(value);
}
inline void Timestamp::set_sender(const char* value, size_t size) {
  set_has_sender();
  if (sender_ == &::google::protobuf::internal::kEmptyString) {
    sender_ = new ::std::string;
  }
  sender_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Timestamp::mutable_sender() {
  set_has_sender();
  if (sender_ == &::google::protobuf::internal::kEmptyString) {
    sender_ = new ::std::string;
  }
  return sender_;
}
inline ::std::string* Timestamp::release_sender() {
  clear_has_sender();
  if (sender_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sender_;
    sender_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Timestamp::set_allocated_sender(::std::string* sender) {
  if (sender_ != &::google::protobuf::internal::kEmptyString) {
    delete sender_;
  }
  if (sender) {
    set_has_sender();
    sender_ = sender;
  } else {
    clear_has_sender();
    sender_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 time = 2;
inline bool Timestamp::has_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Timestamp::set_has_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Timestamp::clear_has_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Timestamp::clear_time() {
  time_ = 0;
  clear_has_time();
}
inline ::google::protobuf::int32 Timestamp::time() const {
  return time_;
}
inline void Timestamp::set_time(::google::protobuf::int32 value) {
  set_has_time();
  time_ = value;
}

// -------------------------------------------------------------------

// TailKeyFilter

// optional bool insert_count = 1;
inline bool TailKeyFilter::has_insert_count() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TailKeyFilter::set_has_insert_count() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TailKeyFilter::clear_has_insert_count() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TailKeyFilter::clear_insert_count() {
  insert_count_ = false;
  clear_has_insert_count();
}
inline bool TailKeyFilter::insert_count() const {
  return insert_count_;
}
inline void TailKeyFilter::set_insert_count(bool value) {
  set_has_insert_count();
  insert_count_ = value;
}

// optional int32 query_key = 2;
inline bool TailKeyFilter::has_query_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TailKeyFilter::set_has_query_key() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TailKeyFilter::clear_has_query_key() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TailKeyFilter::clear_query_key() {
  query_key_ = 0;
  clear_has_query_key();
}
inline ::google::protobuf::int32 TailKeyFilter::query_key() const {
  return query_key_;
}
inline void TailKeyFilter::set_query_key(::google::protobuf::int32 value) {
  set_has_query_key();
  query_key_ = value;
}

// optional bool query_value = 3;
inline bool TailKeyFilter::has_query_value() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TailKeyFilter::set_has_query_value() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TailKeyFilter::clear_has_query_value() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TailKeyFilter::clear_query_value() {
  query_value_ = false;
  clear_has_query_value();
}
inline bool TailKeyFilter::query_value() const {
  return query_value_;
}
inline void TailKeyFilter::set_query_value(bool value) {
  set_has_query_value();
  query_value_ = value;
}

// optional int32 countmin_n = 4;
inline bool TailKeyFilter::has_countmin_n() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TailKeyFilter::set_has_countmin_n() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TailKeyFilter::clear_has_countmin_n() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TailKeyFilter::clear_countmin_n() {
  countmin_n_ = 0;
  clear_has_countmin_n();
}
inline ::google::protobuf::int32 TailKeyFilter::countmin_n() const {
  return countmin_n_;
}
inline void TailKeyFilter::set_countmin_n(::google::protobuf::int32 value) {
  set_has_countmin_n();
  countmin_n_ = value;
}

// optional int32 countmin_k = 5;
inline bool TailKeyFilter::has_countmin_k() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TailKeyFilter::set_has_countmin_k() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TailKeyFilter::clear_has_countmin_k() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TailKeyFilter::clear_countmin_k() {
  countmin_k_ = 0;
  clear_has_countmin_k();
}
inline ::google::protobuf::int32 TailKeyFilter::countmin_k() const {
  return countmin_k_;
}
inline void TailKeyFilter::set_countmin_k(::google::protobuf::int32 value) {
  set_has_countmin_k();
  countmin_k_ = value;
}

// -------------------------------------------------------------------

// CallSharedPara

// required .PS.CallSharedPara.Command cmd = 1;
inline bool CallSharedPara::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CallSharedPara::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CallSharedPara::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CallSharedPara::clear_cmd() {
  cmd_ = 1;
  clear_has_cmd();
}
inline ::PS::CallSharedPara_Command CallSharedPara::cmd() const {
  return static_cast< ::PS::CallSharedPara_Command >(cmd_);
}
inline void CallSharedPara::set_cmd(::PS::CallSharedPara_Command value) {
  assert(::PS::CallSharedPara_Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
}

// optional .PS.Operator op = 2;
inline bool CallSharedPara::has_op() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CallSharedPara::set_has_op() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CallSharedPara::clear_has_op() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CallSharedPara::clear_op() {
  op_ = 0;
  clear_has_op();
}
inline ::PS::Operator CallSharedPara::op() const {
  return static_cast< ::PS::Operator >(op_);
}
inline void CallSharedPara::set_op(::PS::Operator value) {
  assert(::PS::Operator_IsValid(value));
  set_has_op();
  op_ = value;
}

// optional .PS.TailKeyFilter tail_filter = 3;
inline bool CallSharedPara::has_tail_filter() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CallSharedPara::set_has_tail_filter() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CallSharedPara::clear_has_tail_filter() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CallSharedPara::clear_tail_filter() {
  if (tail_filter_ != NULL) tail_filter_->::PS::TailKeyFilter::Clear();
  clear_has_tail_filter();
}
inline const ::PS::TailKeyFilter& CallSharedPara::tail_filter() const {
  return tail_filter_ != NULL ? *tail_filter_ : *default_instance_->tail_filter_;
}
inline ::PS::TailKeyFilter* CallSharedPara::mutable_tail_filter() {
  set_has_tail_filter();
  if (tail_filter_ == NULL) tail_filter_ = new ::PS::TailKeyFilter;
  return tail_filter_;
}
inline ::PS::TailKeyFilter* CallSharedPara::release_tail_filter() {
  clear_has_tail_filter();
  ::PS::TailKeyFilter* temp = tail_filter_;
  tail_filter_ = NULL;
  return temp;
}
inline void CallSharedPara::set_allocated_tail_filter(::PS::TailKeyFilter* tail_filter) {
  delete tail_filter_;
  tail_filter_ = tail_filter;
  if (tail_filter) {
    set_has_tail_filter();
  } else {
    clear_has_tail_filter();
  }
}

// optional bool insert_key = 5;
inline bool CallSharedPara::has_insert_key() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CallSharedPara::set_has_insert_key() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CallSharedPara::clear_has_insert_key() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CallSharedPara::clear_insert_key() {
  insert_key_ = false;
  clear_has_insert_key();
}
inline bool CallSharedPara::insert_key() const {
  return insert_key_;
}
inline void CallSharedPara::set_insert_key(bool value) {
  set_has_insert_key();
  insert_key_ = value;
}

// optional bool gather = 6;
inline bool CallSharedPara::has_gather() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CallSharedPara::set_has_gather() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CallSharedPara::clear_has_gather() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CallSharedPara::clear_gather() {
  gather_ = false;
  clear_has_gather();
}
inline bool CallSharedPara::gather() const {
  return gather_;
}
inline void CallSharedPara::set_gather(bool value) {
  set_has_gather();
  gather_ = value;
}

// optional bool replica = 10;
inline bool CallSharedPara::has_replica() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CallSharedPara::set_has_replica() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CallSharedPara::clear_has_replica() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CallSharedPara::clear_replica() {
  replica_ = false;
  clear_has_replica();
}
inline bool CallSharedPara::replica() const {
  return replica_;
}
inline void CallSharedPara::set_replica(bool value) {
  set_has_replica();
  replica_ = value;
}

// repeated .PS.Timestamp backup = 11;
inline int CallSharedPara::backup_size() const {
  return backup_.size();
}
inline void CallSharedPara::clear_backup() {
  backup_.Clear();
}
inline const ::PS::Timestamp& CallSharedPara::backup(int index) const {
  return backup_.Get(index);
}
inline ::PS::Timestamp* CallSharedPara::mutable_backup(int index) {
  return backup_.Mutable(index);
}
inline ::PS::Timestamp* CallSharedPara::add_backup() {
  return backup_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PS::Timestamp >&
CallSharedPara::backup() const {
  return backup_;
}
inline ::google::protobuf::RepeatedPtrField< ::PS::Timestamp >*
CallSharedPara::mutable_backup() {
  return &backup_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace PS

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PS::ParameterInitConfig_Type>() {
  return ::PS::ParameterInitConfig_Type_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PS::CallSharedPara_Command>() {
  return ::PS::CallSharedPara_Command_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PS::Operator>() {
  return ::PS::Operator_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_parameter_2fproto_2fparam_2eproto__INCLUDED
