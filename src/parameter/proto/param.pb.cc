// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: parameter/proto/param.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "parameter/proto/param.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace PS {

namespace {

const ::google::protobuf::Descriptor* ParameterInitConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ParameterInitConfig_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ParameterInitConfig_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Timestamp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Timestamp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TailKeyFilter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TailKeyFilter_reflection_ = NULL;
const ::google::protobuf::Descriptor* CallSharedPara_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CallSharedPara_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CallSharedPara_Command_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Operator_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_parameter_2fproto_2fparam_2eproto() {
  protobuf_AddDesc_parameter_2fproto_2fparam_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "parameter/proto/param.proto");
  GOOGLE_CHECK(file != NULL);
  ParameterInitConfig_descriptor_ = file->message_type(0);
  static const int ParameterInitConfig_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParameterInitConfig, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParameterInitConfig, constant_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParameterInitConfig, mean_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParameterInitConfig, std_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParameterInitConfig, file_name_),
  };
  ParameterInitConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ParameterInitConfig_descriptor_,
      ParameterInitConfig::default_instance_,
      ParameterInitConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParameterInitConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParameterInitConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ParameterInitConfig));
  ParameterInitConfig_Type_descriptor_ = ParameterInitConfig_descriptor_->enum_type(0);
  Timestamp_descriptor_ = file->message_type(1);
  static const int Timestamp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Timestamp, sender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Timestamp, time_),
  };
  Timestamp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Timestamp_descriptor_,
      Timestamp::default_instance_,
      Timestamp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Timestamp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Timestamp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Timestamp));
  TailKeyFilter_descriptor_ = file->message_type(2);
  static const int TailKeyFilter_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TailKeyFilter, insert_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TailKeyFilter, query_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TailKeyFilter, query_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TailKeyFilter, countmin_n_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TailKeyFilter, countmin_k_),
  };
  TailKeyFilter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TailKeyFilter_descriptor_,
      TailKeyFilter::default_instance_,
      TailKeyFilter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TailKeyFilter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TailKeyFilter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TailKeyFilter));
  CallSharedPara_descriptor_ = file->message_type(3);
  static const int CallSharedPara_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CallSharedPara, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CallSharedPara, op_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CallSharedPara, tail_filter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CallSharedPara, insert_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CallSharedPara, gather_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CallSharedPara, replica_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CallSharedPara, backup_),
  };
  CallSharedPara_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CallSharedPara_descriptor_,
      CallSharedPara::default_instance_,
      CallSharedPara_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CallSharedPara, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CallSharedPara, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CallSharedPara));
  CallSharedPara_Command_descriptor_ = CallSharedPara_descriptor_->enum_type(0);
  Operator_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_parameter_2fproto_2fparam_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ParameterInitConfig_descriptor_, &ParameterInitConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Timestamp_descriptor_, &Timestamp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TailKeyFilter_descriptor_, &TailKeyFilter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CallSharedPara_descriptor_, &CallSharedPara::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_parameter_2fproto_2fparam_2eproto() {
  delete ParameterInitConfig::default_instance_;
  delete ParameterInitConfig_reflection_;
  delete Timestamp::default_instance_;
  delete Timestamp_reflection_;
  delete TailKeyFilter::default_instance_;
  delete TailKeyFilter_reflection_;
  delete CallSharedPara::default_instance_;
  delete CallSharedPara_reflection_;
}

void protobuf_AddDesc_parameter_2fproto_2fparam_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\033parameter/proto/param.proto\022\002PS\"\323\001\n\023Pa"
    "rameterInitConfig\0220\n\004type\030\001 \001(\0162\034.PS.Par"
    "ameterInitConfig.Type:\004ZERO\022\023\n\010constant\030"
    "\002 \001(\001:\0011\022\017\n\004mean\030\003 \001(\001:\0010\022\016\n\003std\030\004 \001(\001:\001"
    "1\022\021\n\tfile_name\030\005 \001(\t\"A\n\004Type\022\010\n\004ZERO\020\001\022\014"
    "\n\010CONSTANT\020\002\022\014\n\010GAUSSIAN\020\003\022\010\n\004FILE\020\004\022\t\n\005"
    "CLONE\020\005\")\n\tTimestamp\022\016\n\006sender\030\001 \002(\t\022\014\n\004"
    "time\030\002 \002(\005\"u\n\rTailKeyFilter\022\024\n\014insert_co"
    "unt\030\001 \001(\010\022\021\n\tquery_key\030\002 \001(\005\022\023\n\013query_va"
    "lue\030\003 \001(\010\022\022\n\ncountmin_n\030\004 \001(\005\022\022\n\ncountmi"
    "n_k\030\005 \001(\005\"\356\001\n\016CallSharedPara\022\'\n\003cmd\030\001 \002("
    "\0162\032.PS.CallSharedPara.Command\022\030\n\002op\030\002 \001("
    "\0162\014.PS.Operator\022&\n\013tail_filter\030\003 \001(\0132\021.P"
    "S.TailKeyFilter\022\022\n\ninsert_key\030\005 \001(\010\022\016\n\006g"
    "ather\030\006 \001(\010\022\017\n\007replica\030\n \001(\010\022\035\n\006backup\030\013"
    " \003(\0132\r.PS.Timestamp\"\035\n\007Command\022\010\n\004PUSH\020\001"
    "\022\010\n\004PULL\020\002*P\n\010Operator\022\010\n\004PLUS\020\000\022\t\n\005MINU"
    "S\020\001\022\t\n\005TIMES\020\002\022\n\n\006DIVIDE\020\003\022\007\n\003AND\020\004\022\006\n\002O"
    "R\020\005\022\007\n\003XOR\020\006", 732);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "parameter/proto/param.proto", &protobuf_RegisterTypes);
  ParameterInitConfig::default_instance_ = new ParameterInitConfig();
  Timestamp::default_instance_ = new Timestamp();
  TailKeyFilter::default_instance_ = new TailKeyFilter();
  CallSharedPara::default_instance_ = new CallSharedPara();
  ParameterInitConfig::default_instance_->InitAsDefaultInstance();
  Timestamp::default_instance_->InitAsDefaultInstance();
  TailKeyFilter::default_instance_->InitAsDefaultInstance();
  CallSharedPara::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_parameter_2fproto_2fparam_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_parameter_2fproto_2fparam_2eproto {
  StaticDescriptorInitializer_parameter_2fproto_2fparam_2eproto() {
    protobuf_AddDesc_parameter_2fproto_2fparam_2eproto();
  }
} static_descriptor_initializer_parameter_2fproto_2fparam_2eproto_;
const ::google::protobuf::EnumDescriptor* Operator_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Operator_descriptor_;
}
bool Operator_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ParameterInitConfig_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ParameterInitConfig_Type_descriptor_;
}
bool ParameterInitConfig_Type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ParameterInitConfig_Type ParameterInitConfig::ZERO;
const ParameterInitConfig_Type ParameterInitConfig::CONSTANT;
const ParameterInitConfig_Type ParameterInitConfig::GAUSSIAN;
const ParameterInitConfig_Type ParameterInitConfig::FILE;
const ParameterInitConfig_Type ParameterInitConfig::CLONE;
const ParameterInitConfig_Type ParameterInitConfig::Type_MIN;
const ParameterInitConfig_Type ParameterInitConfig::Type_MAX;
const int ParameterInitConfig::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ParameterInitConfig::kTypeFieldNumber;
const int ParameterInitConfig::kConstantFieldNumber;
const int ParameterInitConfig::kMeanFieldNumber;
const int ParameterInitConfig::kStdFieldNumber;
const int ParameterInitConfig::kFileNameFieldNumber;
#endif  // !_MSC_VER

ParameterInitConfig::ParameterInitConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ParameterInitConfig::InitAsDefaultInstance() {
}

ParameterInitConfig::ParameterInitConfig(const ParameterInitConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ParameterInitConfig::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  constant_ = 1;
  mean_ = 0;
  std_ = 1;
  file_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ParameterInitConfig::~ParameterInitConfig() {
  SharedDtor();
}

void ParameterInitConfig::SharedDtor() {
  if (file_name_ != &::google::protobuf::internal::kEmptyString) {
    delete file_name_;
  }
  if (this != default_instance_) {
  }
}

void ParameterInitConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ParameterInitConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ParameterInitConfig_descriptor_;
}

const ParameterInitConfig& ParameterInitConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_parameter_2fproto_2fparam_2eproto();
  return *default_instance_;
}

ParameterInitConfig* ParameterInitConfig::default_instance_ = NULL;

ParameterInitConfig* ParameterInitConfig::New() const {
  return new ParameterInitConfig;
}

void ParameterInitConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
    constant_ = 1;
    mean_ = 0;
    std_ = 1;
    if (has_file_name()) {
      if (file_name_ != &::google::protobuf::internal::kEmptyString) {
        file_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ParameterInitConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PS.ParameterInitConfig.Type type = 1 [default = ZERO];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PS::ParameterInitConfig_Type_IsValid(value)) {
            set_type(static_cast< ::PS::ParameterInitConfig_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_constant;
        break;
      }

      // optional double constant = 2 [default = 1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_constant:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &constant_)));
          set_has_constant();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_mean;
        break;
      }

      // optional double mean = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_mean:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &mean_)));
          set_has_mean();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_std;
        break;
      }

      // optional double std = 4 [default = 1];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_std:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &std_)));
          set_has_std();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_file_name;
        break;
      }

      // optional string file_name = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_file_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->file_name().data(), this->file_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ParameterInitConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PS.ParameterInitConfig.Type type = 1 [default = ZERO];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional double constant = 2 [default = 1];
  if (has_constant()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->constant(), output);
  }

  // optional double mean = 3 [default = 0];
  if (has_mean()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->mean(), output);
  }

  // optional double std = 4 [default = 1];
  if (has_std()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->std(), output);
  }

  // optional string file_name = 5;
  if (has_file_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->file_name().data(), this->file_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->file_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ParameterInitConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PS.ParameterInitConfig.Type type = 1 [default = ZERO];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional double constant = 2 [default = 1];
  if (has_constant()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->constant(), target);
  }

  // optional double mean = 3 [default = 0];
  if (has_mean()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->mean(), target);
  }

  // optional double std = 4 [default = 1];
  if (has_std()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->std(), target);
  }

  // optional string file_name = 5;
  if (has_file_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->file_name().data(), this->file_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->file_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ParameterInitConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PS.ParameterInitConfig.Type type = 1 [default = ZERO];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional double constant = 2 [default = 1];
    if (has_constant()) {
      total_size += 1 + 8;
    }

    // optional double mean = 3 [default = 0];
    if (has_mean()) {
      total_size += 1 + 8;
    }

    // optional double std = 4 [default = 1];
    if (has_std()) {
      total_size += 1 + 8;
    }

    // optional string file_name = 5;
    if (has_file_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ParameterInitConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ParameterInitConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ParameterInitConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ParameterInitConfig::MergeFrom(const ParameterInitConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_constant()) {
      set_constant(from.constant());
    }
    if (from.has_mean()) {
      set_mean(from.mean());
    }
    if (from.has_std()) {
      set_std(from.std());
    }
    if (from.has_file_name()) {
      set_file_name(from.file_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ParameterInitConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ParameterInitConfig::CopyFrom(const ParameterInitConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParameterInitConfig::IsInitialized() const {

  return true;
}

void ParameterInitConfig::Swap(ParameterInitConfig* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(constant_, other->constant_);
    std::swap(mean_, other->mean_);
    std::swap(std_, other->std_);
    std::swap(file_name_, other->file_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ParameterInitConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ParameterInitConfig_descriptor_;
  metadata.reflection = ParameterInitConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Timestamp::kSenderFieldNumber;
const int Timestamp::kTimeFieldNumber;
#endif  // !_MSC_VER

Timestamp::Timestamp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Timestamp::InitAsDefaultInstance() {
}

Timestamp::Timestamp(const Timestamp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Timestamp::SharedCtor() {
  _cached_size_ = 0;
  sender_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Timestamp::~Timestamp() {
  SharedDtor();
}

void Timestamp::SharedDtor() {
  if (sender_ != &::google::protobuf::internal::kEmptyString) {
    delete sender_;
  }
  if (this != default_instance_) {
  }
}

void Timestamp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Timestamp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Timestamp_descriptor_;
}

const Timestamp& Timestamp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_parameter_2fproto_2fparam_2eproto();
  return *default_instance_;
}

Timestamp* Timestamp::default_instance_ = NULL;

Timestamp* Timestamp::New() const {
  return new Timestamp;
}

void Timestamp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_sender()) {
      if (sender_ != &::google::protobuf::internal::kEmptyString) {
        sender_->clear();
      }
    }
    time_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Timestamp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string sender = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sender()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sender().data(), this->sender().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_time;
        break;
      }

      // required int32 time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Timestamp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string sender = 1;
  if (has_sender()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sender().data(), this->sender().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->sender(), output);
  }

  // required int32 time = 2;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Timestamp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string sender = 1;
  if (has_sender()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sender().data(), this->sender().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->sender(), target);
  }

  // required int32 time = 2;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Timestamp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string sender = 1;
    if (has_sender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sender());
    }

    // required int32 time = 2;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Timestamp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Timestamp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Timestamp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Timestamp::MergeFrom(const Timestamp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sender()) {
      set_sender(from.sender());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Timestamp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Timestamp::CopyFrom(const Timestamp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Timestamp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Timestamp::Swap(Timestamp* other) {
  if (other != this) {
    std::swap(sender_, other->sender_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Timestamp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Timestamp_descriptor_;
  metadata.reflection = Timestamp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TailKeyFilter::kInsertCountFieldNumber;
const int TailKeyFilter::kQueryKeyFieldNumber;
const int TailKeyFilter::kQueryValueFieldNumber;
const int TailKeyFilter::kCountminNFieldNumber;
const int TailKeyFilter::kCountminKFieldNumber;
#endif  // !_MSC_VER

TailKeyFilter::TailKeyFilter()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TailKeyFilter::InitAsDefaultInstance() {
}

TailKeyFilter::TailKeyFilter(const TailKeyFilter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TailKeyFilter::SharedCtor() {
  _cached_size_ = 0;
  insert_count_ = false;
  query_key_ = 0;
  query_value_ = false;
  countmin_n_ = 0;
  countmin_k_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TailKeyFilter::~TailKeyFilter() {
  SharedDtor();
}

void TailKeyFilter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TailKeyFilter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TailKeyFilter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TailKeyFilter_descriptor_;
}

const TailKeyFilter& TailKeyFilter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_parameter_2fproto_2fparam_2eproto();
  return *default_instance_;
}

TailKeyFilter* TailKeyFilter::default_instance_ = NULL;

TailKeyFilter* TailKeyFilter::New() const {
  return new TailKeyFilter;
}

void TailKeyFilter::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    insert_count_ = false;
    query_key_ = 0;
    query_value_ = false;
    countmin_n_ = 0;
    countmin_k_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TailKeyFilter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool insert_count = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &insert_count_)));
          set_has_insert_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_query_key;
        break;
      }

      // optional int32 query_key = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_query_key:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &query_key_)));
          set_has_query_key();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_query_value;
        break;
      }

      // optional bool query_value = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_query_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &query_value_)));
          set_has_query_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_countmin_n;
        break;
      }

      // optional int32 countmin_n = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_countmin_n:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &countmin_n_)));
          set_has_countmin_n();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_countmin_k;
        break;
      }

      // optional int32 countmin_k = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_countmin_k:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &countmin_k_)));
          set_has_countmin_k();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TailKeyFilter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool insert_count = 1;
  if (has_insert_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->insert_count(), output);
  }

  // optional int32 query_key = 2;
  if (has_query_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->query_key(), output);
  }

  // optional bool query_value = 3;
  if (has_query_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->query_value(), output);
  }

  // optional int32 countmin_n = 4;
  if (has_countmin_n()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->countmin_n(), output);
  }

  // optional int32 countmin_k = 5;
  if (has_countmin_k()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->countmin_k(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TailKeyFilter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool insert_count = 1;
  if (has_insert_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->insert_count(), target);
  }

  // optional int32 query_key = 2;
  if (has_query_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->query_key(), target);
  }

  // optional bool query_value = 3;
  if (has_query_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->query_value(), target);
  }

  // optional int32 countmin_n = 4;
  if (has_countmin_n()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->countmin_n(), target);
  }

  // optional int32 countmin_k = 5;
  if (has_countmin_k()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->countmin_k(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TailKeyFilter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool insert_count = 1;
    if (has_insert_count()) {
      total_size += 1 + 1;
    }

    // optional int32 query_key = 2;
    if (has_query_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->query_key());
    }

    // optional bool query_value = 3;
    if (has_query_value()) {
      total_size += 1 + 1;
    }

    // optional int32 countmin_n = 4;
    if (has_countmin_n()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->countmin_n());
    }

    // optional int32 countmin_k = 5;
    if (has_countmin_k()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->countmin_k());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TailKeyFilter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TailKeyFilter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TailKeyFilter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TailKeyFilter::MergeFrom(const TailKeyFilter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_insert_count()) {
      set_insert_count(from.insert_count());
    }
    if (from.has_query_key()) {
      set_query_key(from.query_key());
    }
    if (from.has_query_value()) {
      set_query_value(from.query_value());
    }
    if (from.has_countmin_n()) {
      set_countmin_n(from.countmin_n());
    }
    if (from.has_countmin_k()) {
      set_countmin_k(from.countmin_k());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TailKeyFilter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TailKeyFilter::CopyFrom(const TailKeyFilter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TailKeyFilter::IsInitialized() const {

  return true;
}

void TailKeyFilter::Swap(TailKeyFilter* other) {
  if (other != this) {
    std::swap(insert_count_, other->insert_count_);
    std::swap(query_key_, other->query_key_);
    std::swap(query_value_, other->query_value_);
    std::swap(countmin_n_, other->countmin_n_);
    std::swap(countmin_k_, other->countmin_k_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TailKeyFilter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TailKeyFilter_descriptor_;
  metadata.reflection = TailKeyFilter_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* CallSharedPara_Command_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CallSharedPara_Command_descriptor_;
}
bool CallSharedPara_Command_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CallSharedPara_Command CallSharedPara::PUSH;
const CallSharedPara_Command CallSharedPara::PULL;
const CallSharedPara_Command CallSharedPara::Command_MIN;
const CallSharedPara_Command CallSharedPara::Command_MAX;
const int CallSharedPara::Command_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CallSharedPara::kCmdFieldNumber;
const int CallSharedPara::kOpFieldNumber;
const int CallSharedPara::kTailFilterFieldNumber;
const int CallSharedPara::kInsertKeyFieldNumber;
const int CallSharedPara::kGatherFieldNumber;
const int CallSharedPara::kReplicaFieldNumber;
const int CallSharedPara::kBackupFieldNumber;
#endif  // !_MSC_VER

CallSharedPara::CallSharedPara()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CallSharedPara::InitAsDefaultInstance() {
  tail_filter_ = const_cast< ::PS::TailKeyFilter*>(&::PS::TailKeyFilter::default_instance());
}

CallSharedPara::CallSharedPara(const CallSharedPara& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CallSharedPara::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 1;
  op_ = 0;
  tail_filter_ = NULL;
  insert_key_ = false;
  gather_ = false;
  replica_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CallSharedPara::~CallSharedPara() {
  SharedDtor();
}

void CallSharedPara::SharedDtor() {
  if (this != default_instance_) {
    delete tail_filter_;
  }
}

void CallSharedPara::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CallSharedPara::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CallSharedPara_descriptor_;
}

const CallSharedPara& CallSharedPara::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_parameter_2fproto_2fparam_2eproto();
  return *default_instance_;
}

CallSharedPara* CallSharedPara::default_instance_ = NULL;

CallSharedPara* CallSharedPara::New() const {
  return new CallSharedPara;
}

void CallSharedPara::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cmd_ = 1;
    op_ = 0;
    if (has_tail_filter()) {
      if (tail_filter_ != NULL) tail_filter_->::PS::TailKeyFilter::Clear();
    }
    insert_key_ = false;
    gather_ = false;
    replica_ = false;
  }
  backup_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CallSharedPara::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .PS.CallSharedPara.Command cmd = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PS::CallSharedPara_Command_IsValid(value)) {
            set_cmd(static_cast< ::PS::CallSharedPara_Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_op;
        break;
      }

      // optional .PS.Operator op = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_op:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PS::Operator_IsValid(value)) {
            set_op(static_cast< ::PS::Operator >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_tail_filter;
        break;
      }

      // optional .PS.TailKeyFilter tail_filter = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tail_filter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tail_filter()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_insert_key;
        break;
      }

      // optional bool insert_key = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_insert_key:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &insert_key_)));
          set_has_insert_key();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_gather;
        break;
      }

      // optional bool gather = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gather:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &gather_)));
          set_has_gather();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_replica;
        break;
      }

      // optional bool replica = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_replica:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &replica_)));
          set_has_replica();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_backup;
        break;
      }

      // repeated .PS.Timestamp backup = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_backup:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_backup()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_backup;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CallSharedPara::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .PS.CallSharedPara.Command cmd = 1;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .PS.Operator op = 2;
  if (has_op()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->op(), output);
  }

  // optional .PS.TailKeyFilter tail_filter = 3;
  if (has_tail_filter()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->tail_filter(), output);
  }

  // optional bool insert_key = 5;
  if (has_insert_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->insert_key(), output);
  }

  // optional bool gather = 6;
  if (has_gather()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->gather(), output);
  }

  // optional bool replica = 10;
  if (has_replica()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->replica(), output);
  }

  // repeated .PS.Timestamp backup = 11;
  for (int i = 0; i < this->backup_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->backup(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CallSharedPara::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .PS.CallSharedPara.Command cmd = 1;
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .PS.Operator op = 2;
  if (has_op()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->op(), target);
  }

  // optional .PS.TailKeyFilter tail_filter = 3;
  if (has_tail_filter()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->tail_filter(), target);
  }

  // optional bool insert_key = 5;
  if (has_insert_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->insert_key(), target);
  }

  // optional bool gather = 6;
  if (has_gather()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->gather(), target);
  }

  // optional bool replica = 10;
  if (has_replica()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->replica(), target);
  }

  // repeated .PS.Timestamp backup = 11;
  for (int i = 0; i < this->backup_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->backup(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CallSharedPara::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .PS.CallSharedPara.Command cmd = 1;
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .PS.Operator op = 2;
    if (has_op()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->op());
    }

    // optional .PS.TailKeyFilter tail_filter = 3;
    if (has_tail_filter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tail_filter());
    }

    // optional bool insert_key = 5;
    if (has_insert_key()) {
      total_size += 1 + 1;
    }

    // optional bool gather = 6;
    if (has_gather()) {
      total_size += 1 + 1;
    }

    // optional bool replica = 10;
    if (has_replica()) {
      total_size += 1 + 1;
    }

  }
  // repeated .PS.Timestamp backup = 11;
  total_size += 1 * this->backup_size();
  for (int i = 0; i < this->backup_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->backup(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CallSharedPara::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CallSharedPara* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CallSharedPara*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CallSharedPara::MergeFrom(const CallSharedPara& from) {
  GOOGLE_CHECK_NE(&from, this);
  backup_.MergeFrom(from.backup_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_op()) {
      set_op(from.op());
    }
    if (from.has_tail_filter()) {
      mutable_tail_filter()->::PS::TailKeyFilter::MergeFrom(from.tail_filter());
    }
    if (from.has_insert_key()) {
      set_insert_key(from.insert_key());
    }
    if (from.has_gather()) {
      set_gather(from.gather());
    }
    if (from.has_replica()) {
      set_replica(from.replica());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CallSharedPara::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CallSharedPara::CopyFrom(const CallSharedPara& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CallSharedPara::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < backup_size(); i++) {
    if (!this->backup(i).IsInitialized()) return false;
  }
  return true;
}

void CallSharedPara::Swap(CallSharedPara* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(op_, other->op_);
    std::swap(tail_filter_, other->tail_filter_);
    std::swap(insert_key_, other->insert_key_);
    std::swap(gather_, other->gather_);
    std::swap(replica_, other->replica_);
    backup_.Swap(&other->backup_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CallSharedPara::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CallSharedPara_descriptor_;
  metadata.reflection = CallSharedPara_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace PS

// @@protoc_insertion_point(global_scope)
