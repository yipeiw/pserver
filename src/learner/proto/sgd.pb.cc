// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: learner/proto/sgd.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "learner/proto/sgd.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace PS {

namespace {

const ::google::protobuf::Descriptor* SGDProgress_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SGDProgress_reflection_ = NULL;
const ::google::protobuf::Descriptor* SGDCall_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SGDCall_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* SGDCall_Command_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_learner_2fproto_2fsgd_2eproto() {
  protobuf_AddDesc_learner_2fproto_2fsgd_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "learner/proto/sgd.proto");
  GOOGLE_CHECK(file != NULL);
  SGDProgress_descriptor_ = file->message_type(0);
  static const int SGDProgress_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SGDProgress, objective_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SGDProgress, num_examples_processed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SGDProgress, accuracy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SGDProgress, auc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SGDProgress, nnz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SGDProgress, weight_sum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SGDProgress, delta_sum_),
  };
  SGDProgress_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SGDProgress_descriptor_,
      SGDProgress::default_instance_,
      SGDProgress_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SGDProgress, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SGDProgress, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SGDProgress));
  SGDCall_descriptor_ = file->message_type(1);
  static const int SGDCall_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SGDCall, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SGDCall, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SGDCall, report_interval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SGDCall, data_buf_),
  };
  SGDCall_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SGDCall_descriptor_,
      SGDCall::default_instance_,
      SGDCall_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SGDCall, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SGDCall, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SGDCall));
  SGDCall_Command_descriptor_ = SGDCall_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_learner_2fproto_2fsgd_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SGDProgress_descriptor_, &SGDProgress::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SGDCall_descriptor_, &SGDCall::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_learner_2fproto_2fsgd_2eproto() {
  delete SGDProgress::default_instance_;
  delete SGDProgress_reflection_;
  delete SGDCall::default_instance_;
  delete SGDCall_reflection_;
}

void protobuf_AddDesc_learner_2fproto_2fsgd_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::PS::protobuf_AddDesc_data_2fproto_2fdata_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\027learner/proto/sgd.proto\022\002PS\032\025data/prot"
    "o/data.proto\"\223\001\n\013SGDProgress\022\021\n\tobjectiv"
    "e\030\001 \003(\001\022\036\n\026num_examples_processed\030\002 \001(\004\022"
    "\020\n\010accuracy\030\003 \003(\001\022\013\n\003auc\030\004 \003(\001\022\013\n\003nnz\030\005 "
    "\001(\004\022\022\n\nweight_sum\030\006 \001(\001\022\021\n\tdelta_sum\030\007 \001"
    "(\001\"\350\001\n\007SGDCall\022 \n\003cmd\030\001 \002(\0162\023.PS.SGDCall"
    ".Command\022\034\n\004data\030\002 \001(\0132\016.PS.DataConfig\022\032"
    "\n\017report_interval\030\003 \001(\005:\0011\022\026\n\010data_buf\030\004"
    " \001(\005:\0041000\"i\n\007Command\022\020\n\014UPDATE_MODEL\020\001\022"
    "\023\n\017REPORT_PROGRESS\020\002\022\016\n\nSAVE_MODEL\020\003\022\013\n\007"
    "RECOVER\020\004\022\032\n\026COMPUTE_VALIDATION_AUC\020\005", 437);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "learner/proto/sgd.proto", &protobuf_RegisterTypes);
  SGDProgress::default_instance_ = new SGDProgress();
  SGDCall::default_instance_ = new SGDCall();
  SGDProgress::default_instance_->InitAsDefaultInstance();
  SGDCall::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_learner_2fproto_2fsgd_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_learner_2fproto_2fsgd_2eproto {
  StaticDescriptorInitializer_learner_2fproto_2fsgd_2eproto() {
    protobuf_AddDesc_learner_2fproto_2fsgd_2eproto();
  }
} static_descriptor_initializer_learner_2fproto_2fsgd_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int SGDProgress::kObjectiveFieldNumber;
const int SGDProgress::kNumExamplesProcessedFieldNumber;
const int SGDProgress::kAccuracyFieldNumber;
const int SGDProgress::kAucFieldNumber;
const int SGDProgress::kNnzFieldNumber;
const int SGDProgress::kWeightSumFieldNumber;
const int SGDProgress::kDeltaSumFieldNumber;
#endif  // !_MSC_VER

SGDProgress::SGDProgress()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SGDProgress::InitAsDefaultInstance() {
}

SGDProgress::SGDProgress(const SGDProgress& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SGDProgress::SharedCtor() {
  _cached_size_ = 0;
  num_examples_processed_ = GOOGLE_ULONGLONG(0);
  nnz_ = GOOGLE_ULONGLONG(0);
  weight_sum_ = 0;
  delta_sum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SGDProgress::~SGDProgress() {
  SharedDtor();
}

void SGDProgress::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SGDProgress::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SGDProgress::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SGDProgress_descriptor_;
}

const SGDProgress& SGDProgress::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_learner_2fproto_2fsgd_2eproto();
  return *default_instance_;
}

SGDProgress* SGDProgress::default_instance_ = NULL;

SGDProgress* SGDProgress::New() const {
  return new SGDProgress;
}

void SGDProgress::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    num_examples_processed_ = GOOGLE_ULONGLONG(0);
    nnz_ = GOOGLE_ULONGLONG(0);
    weight_sum_ = 0;
    delta_sum_ = 0;
  }
  objective_.Clear();
  accuracy_.Clear();
  auc_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SGDProgress::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated double objective = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_objective:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 9, input, this->mutable_objective())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_objective())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(9)) goto parse_objective;
        if (input->ExpectTag(16)) goto parse_num_examples_processed;
        break;
      }

      // optional uint64 num_examples_processed = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num_examples_processed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &num_examples_processed_)));
          set_has_num_examples_processed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_accuracy;
        break;
      }

      // repeated double accuracy = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_accuracy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 25, input, this->mutable_accuracy())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_accuracy())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_accuracy;
        if (input->ExpectTag(33)) goto parse_auc;
        break;
      }

      // repeated double auc = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_auc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 33, input, this->mutable_auc())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_auc())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_auc;
        if (input->ExpectTag(40)) goto parse_nnz;
        break;
      }

      // optional uint64 nnz = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nnz:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &nnz_)));
          set_has_nnz();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_weight_sum;
        break;
      }

      // optional double weight_sum = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_weight_sum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &weight_sum_)));
          set_has_weight_sum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_delta_sum;
        break;
      }

      // optional double delta_sum = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_delta_sum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &delta_sum_)));
          set_has_delta_sum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SGDProgress::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated double objective = 1;
  for (int i = 0; i < this->objective_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      1, this->objective(i), output);
  }

  // optional uint64 num_examples_processed = 2;
  if (has_num_examples_processed()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->num_examples_processed(), output);
  }

  // repeated double accuracy = 3;
  for (int i = 0; i < this->accuracy_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      3, this->accuracy(i), output);
  }

  // repeated double auc = 4;
  for (int i = 0; i < this->auc_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      4, this->auc(i), output);
  }

  // optional uint64 nnz = 5;
  if (has_nnz()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->nnz(), output);
  }

  // optional double weight_sum = 6;
  if (has_weight_sum()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->weight_sum(), output);
  }

  // optional double delta_sum = 7;
  if (has_delta_sum()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->delta_sum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SGDProgress::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated double objective = 1;
  for (int i = 0; i < this->objective_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(1, this->objective(i), target);
  }

  // optional uint64 num_examples_processed = 2;
  if (has_num_examples_processed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->num_examples_processed(), target);
  }

  // repeated double accuracy = 3;
  for (int i = 0; i < this->accuracy_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(3, this->accuracy(i), target);
  }

  // repeated double auc = 4;
  for (int i = 0; i < this->auc_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(4, this->auc(i), target);
  }

  // optional uint64 nnz = 5;
  if (has_nnz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->nnz(), target);
  }

  // optional double weight_sum = 6;
  if (has_weight_sum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->weight_sum(), target);
  }

  // optional double delta_sum = 7;
  if (has_delta_sum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->delta_sum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SGDProgress::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint64 num_examples_processed = 2;
    if (has_num_examples_processed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->num_examples_processed());
    }

    // optional uint64 nnz = 5;
    if (has_nnz()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->nnz());
    }

    // optional double weight_sum = 6;
    if (has_weight_sum()) {
      total_size += 1 + 8;
    }

    // optional double delta_sum = 7;
    if (has_delta_sum()) {
      total_size += 1 + 8;
    }

  }
  // repeated double objective = 1;
  {
    int data_size = 0;
    data_size = 8 * this->objective_size();
    total_size += 1 * this->objective_size() + data_size;
  }

  // repeated double accuracy = 3;
  {
    int data_size = 0;
    data_size = 8 * this->accuracy_size();
    total_size += 1 * this->accuracy_size() + data_size;
  }

  // repeated double auc = 4;
  {
    int data_size = 0;
    data_size = 8 * this->auc_size();
    total_size += 1 * this->auc_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SGDProgress::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SGDProgress* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SGDProgress*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SGDProgress::MergeFrom(const SGDProgress& from) {
  GOOGLE_CHECK_NE(&from, this);
  objective_.MergeFrom(from.objective_);
  accuracy_.MergeFrom(from.accuracy_);
  auc_.MergeFrom(from.auc_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_num_examples_processed()) {
      set_num_examples_processed(from.num_examples_processed());
    }
    if (from.has_nnz()) {
      set_nnz(from.nnz());
    }
    if (from.has_weight_sum()) {
      set_weight_sum(from.weight_sum());
    }
    if (from.has_delta_sum()) {
      set_delta_sum(from.delta_sum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SGDProgress::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SGDProgress::CopyFrom(const SGDProgress& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SGDProgress::IsInitialized() const {

  return true;
}

void SGDProgress::Swap(SGDProgress* other) {
  if (other != this) {
    objective_.Swap(&other->objective_);
    std::swap(num_examples_processed_, other->num_examples_processed_);
    accuracy_.Swap(&other->accuracy_);
    auc_.Swap(&other->auc_);
    std::swap(nnz_, other->nnz_);
    std::swap(weight_sum_, other->weight_sum_);
    std::swap(delta_sum_, other->delta_sum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SGDProgress::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SGDProgress_descriptor_;
  metadata.reflection = SGDProgress_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* SGDCall_Command_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SGDCall_Command_descriptor_;
}
bool SGDCall_Command_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const SGDCall_Command SGDCall::UPDATE_MODEL;
const SGDCall_Command SGDCall::REPORT_PROGRESS;
const SGDCall_Command SGDCall::SAVE_MODEL;
const SGDCall_Command SGDCall::RECOVER;
const SGDCall_Command SGDCall::COMPUTE_VALIDATION_AUC;
const SGDCall_Command SGDCall::Command_MIN;
const SGDCall_Command SGDCall::Command_MAX;
const int SGDCall::Command_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int SGDCall::kCmdFieldNumber;
const int SGDCall::kDataFieldNumber;
const int SGDCall::kReportIntervalFieldNumber;
const int SGDCall::kDataBufFieldNumber;
#endif  // !_MSC_VER

SGDCall::SGDCall()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SGDCall::InitAsDefaultInstance() {
  data_ = const_cast< ::PS::DataConfig*>(&::PS::DataConfig::default_instance());
}

SGDCall::SGDCall(const SGDCall& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SGDCall::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 1;
  data_ = NULL;
  report_interval_ = 1;
  data_buf_ = 1000;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SGDCall::~SGDCall() {
  SharedDtor();
}

void SGDCall::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void SGDCall::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SGDCall::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SGDCall_descriptor_;
}

const SGDCall& SGDCall::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_learner_2fproto_2fsgd_2eproto();
  return *default_instance_;
}

SGDCall* SGDCall::default_instance_ = NULL;

SGDCall* SGDCall::New() const {
  return new SGDCall;
}

void SGDCall::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cmd_ = 1;
    if (has_data()) {
      if (data_ != NULL) data_->::PS::DataConfig::Clear();
    }
    report_interval_ = 1;
    data_buf_ = 1000;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SGDCall::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .PS.SGDCall.Command cmd = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PS::SGDCall_Command_IsValid(value)) {
            set_cmd(static_cast< ::PS::SGDCall_Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // optional .PS.DataConfig data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_report_interval;
        break;
      }

      // optional int32 report_interval = 3 [default = 1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_report_interval:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &report_interval_)));
          set_has_report_interval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_data_buf;
        break;
      }

      // optional int32 data_buf = 4 [default = 1000];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_data_buf:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &data_buf_)));
          set_has_data_buf();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SGDCall::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .PS.SGDCall.Command cmd = 1;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .PS.DataConfig data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->data(), output);
  }

  // optional int32 report_interval = 3 [default = 1];
  if (has_report_interval()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->report_interval(), output);
  }

  // optional int32 data_buf = 4 [default = 1000];
  if (has_data_buf()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->data_buf(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SGDCall::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .PS.SGDCall.Command cmd = 1;
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .PS.DataConfig data = 2;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->data(), target);
  }

  // optional int32 report_interval = 3 [default = 1];
  if (has_report_interval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->report_interval(), target);
  }

  // optional int32 data_buf = 4 [default = 1000];
  if (has_data_buf()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->data_buf(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SGDCall::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .PS.SGDCall.Command cmd = 1;
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .PS.DataConfig data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

    // optional int32 report_interval = 3 [default = 1];
    if (has_report_interval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->report_interval());
    }

    // optional int32 data_buf = 4 [default = 1000];
    if (has_data_buf()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->data_buf());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SGDCall::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SGDCall* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SGDCall*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SGDCall::MergeFrom(const SGDCall& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_data()) {
      mutable_data()->::PS::DataConfig::MergeFrom(from.data());
    }
    if (from.has_report_interval()) {
      set_report_interval(from.report_interval());
    }
    if (from.has_data_buf()) {
      set_data_buf(from.data_buf());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SGDCall::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SGDCall::CopyFrom(const SGDCall& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SGDCall::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_data()) {
    if (!this->data().IsInitialized()) return false;
  }
  return true;
}

void SGDCall::Swap(SGDCall* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(data_, other->data_);
    std::swap(report_interval_, other->report_interval_);
    std::swap(data_buf_, other->data_buf_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SGDCall::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SGDCall_descriptor_;
  metadata.reflection = SGDCall_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace PS

// @@protoc_insertion_point(global_scope)
