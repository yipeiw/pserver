// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: learner/proto/bcd.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "learner/proto/bcd.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace PS {

namespace {

const ::google::protobuf::Descriptor* BCDConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BCDConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* BCDProgress_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BCDProgress_reflection_ = NULL;
const ::google::protobuf::Descriptor* BCDCall_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BCDCall_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* BCDCall_Command_descriptor_ = NULL;
const ::google::protobuf::Descriptor* LoadDataReturn_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoadDataReturn_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_learner_2fproto_2fbcd_2eproto() {
  protobuf_AddDesc_learner_2fproto_2fbcd_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "learner/proto/bcd.proto");
  GOOGLE_CHECK(file != NULL);
  BCDConfig_descriptor_ = file->message_type(0);
  static const int BCDConfig_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BCDConfig, feature_block_ratio_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BCDConfig, random_feature_block_order_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BCDConfig, prior_fea_group_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BCDConfig, num_iter_for_prior_fea_group_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BCDConfig, max_block_delay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BCDConfig, max_pass_of_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BCDConfig, epsilon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BCDConfig, tail_feature_freq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BCDConfig, countmin_k_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BCDConfig, countmin_n_ratio_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BCDConfig, max_num_parallel_groups_in_preprocessing_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BCDConfig, max_data_buf_size_in_mb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BCDConfig, local_cache_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BCDConfig, init_w_),
  };
  BCDConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BCDConfig_descriptor_,
      BCDConfig::default_instance_,
      BCDConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BCDConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BCDConfig, _unknown_fields_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BCDConfig, _extensions_),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BCDConfig));
  BCDProgress_descriptor_ = file->message_type(1);
  static const int BCDProgress_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BCDProgress, objective_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BCDProgress, relative_obj_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BCDProgress, nnz_w_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BCDProgress, violation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BCDProgress, nnz_active_set_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BCDProgress, total_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BCDProgress, busy_time_),
  };
  BCDProgress_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BCDProgress_descriptor_,
      BCDProgress::default_instance_,
      BCDProgress_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BCDProgress, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BCDProgress, _unknown_fields_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BCDProgress, _extensions_),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BCDProgress));
  BCDCall_descriptor_ = file->message_type(2);
  static const int BCDCall_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BCDCall, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BCDCall, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BCDCall, kkt_filter_threshold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BCDCall, reset_kkt_filter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BCDCall, fea_grp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BCDCall, hit_cache_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BCDCall, data_),
  };
  BCDCall_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BCDCall_descriptor_,
      BCDCall::default_instance_,
      BCDCall_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BCDCall, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BCDCall, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BCDCall));
  BCDCall_Command_descriptor_ = BCDCall_descriptor_->enum_type(0);
  LoadDataReturn_descriptor_ = file->message_type(3);
  static const int LoadDataReturn_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoadDataReturn, example_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoadDataReturn, hit_cache_),
  };
  LoadDataReturn_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LoadDataReturn_descriptor_,
      LoadDataReturn::default_instance_,
      LoadDataReturn_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoadDataReturn, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoadDataReturn, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LoadDataReturn));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_learner_2fproto_2fbcd_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BCDConfig_descriptor_, &BCDConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BCDProgress_descriptor_, &BCDProgress::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BCDCall_descriptor_, &BCDCall::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LoadDataReturn_descriptor_, &LoadDataReturn::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_learner_2fproto_2fbcd_2eproto() {
  delete BCDConfig::default_instance_;
  delete BCDConfig_reflection_;
  delete BCDProgress::default_instance_;
  delete BCDProgress_reflection_;
  delete BCDCall::default_instance_;
  delete BCDCall_reflection_;
  delete LoadDataReturn::default_instance_;
  delete LoadDataReturn_reflection_;
}

void protobuf_AddDesc_learner_2fproto_2fbcd_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::PS::protobuf_AddDesc_util_2fproto_2frange_2eproto();
  ::PS::protobuf_AddDesc_data_2fproto_2fdata_2eproto();
  ::PS::protobuf_AddDesc_data_2fproto_2fexample_2eproto();
  ::PS::protobuf_AddDesc_parameter_2fproto_2fparam_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\027learner/proto/bcd.proto\022\002PS\032\026util/prot"
    "o/range.proto\032\025data/proto/data.proto\032\030da"
    "ta/proto/example.proto\032\033parameter/proto/"
    "param.proto\"\360\003\n\tBCDConfig\022\036\n\023feature_blo"
    "ck_ratio\030\001 \001(\002:\0014\022(\n\032random_feature_bloc"
    "k_order\030\002 \001(\010:\004true\022\027\n\017prior_fea_group\030\016"
    " \003(\005\022\'\n\034num_iter_for_prior_fea_group\030\r \001"
    "(\005:\0015\022\032\n\017max_block_delay\030\003 \001(\005:\0010\022\034\n\020max"
    "_pass_of_data\030\004 \001(\005:\00210\022\027\n\007epsilon\030\005 \001(\001"
    ":\0060.0001\022\034\n\021tail_feature_freq\030\006 \001(\005:\0010\022\025"
    "\n\ncountmin_k\030\007 \001(\005:\0012\022\033\n\020countmin_n_rati"
    "o\030\010 \001(\001:\0012\0226\n(max_num_parallel_groups_in"
    "_preprocessing\030\t \001(\005:\0041000\022%\n\027max_data_b"
    "uf_size_in_mb\030\n \001(\005:\0041000\022#\n\013local_cache"
    "\030\013 \001(\0132\016.PS.DataConfig\022\'\n\006init_w\030\014 \001(\0132\027"
    ".PS.ParameterInitConfig*\005\010d\020\310\001\"\236\001\n\013BCDPr"
    "ogress\022\021\n\tobjective\030\001 \001(\001\022\024\n\014relative_ob"
    "j\030\002 \001(\001\022\r\n\005nnz_w\030\005 \001(\004\022\021\n\tviolation\030\006 \001("
    "\001\022\026\n\016nnz_active_set\030\007 \001(\004\022\022\n\ntotal_time\030"
    "\n \001(\001\022\021\n\tbusy_time\030\013 \003(\001*\005\010d\020\310\001\"\321\002\n\007BCDC"
    "all\022 \n\003cmd\030\001 \002(\0162\023.PS.BCDCall.Command\022\030\n"
    "\003key\030\002 \001(\0132\013.PS.PbRange\022\034\n\024kkt_filter_th"
    "reshold\030\004 \001(\001\022\030\n\020reset_kkt_filter\030\005 \001(\010\022"
    "\017\n\007fea_grp\030\010 \003(\005\022\021\n\thit_cache\030\t \001(\010\022\034\n\004d"
    "ata\030\n \001(\0132\016.PS.DataConfig\"\217\001\n\007Command\022\r\n"
    "\tLOAD_DATA\020\001\022\023\n\017PREPROCESS_DATA\020\002\022\020\n\014UPD"
    "ATE_MODEL\020\003\022\025\n\021EVALUATE_PROGRESS\020\004\022\016\n\nSA"
    "VE_MODEL\020\005\022\013\n\007RECOVER\020\006\022\032\n\026COMPUTE_VALID"
    "ATION_AUC\020\007\"J\n\016LoadDataReturn\022%\n\014example"
    "_info\030\001 \001(\0132\017.PS.ExampleInfo\022\021\n\thit_cach"
    "e\030\002 \001(\005", 1207);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "learner/proto/bcd.proto", &protobuf_RegisterTypes);
  BCDConfig::default_instance_ = new BCDConfig();
  BCDProgress::default_instance_ = new BCDProgress();
  BCDCall::default_instance_ = new BCDCall();
  LoadDataReturn::default_instance_ = new LoadDataReturn();
  BCDConfig::default_instance_->InitAsDefaultInstance();
  BCDProgress::default_instance_->InitAsDefaultInstance();
  BCDCall::default_instance_->InitAsDefaultInstance();
  LoadDataReturn::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_learner_2fproto_2fbcd_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_learner_2fproto_2fbcd_2eproto {
  StaticDescriptorInitializer_learner_2fproto_2fbcd_2eproto() {
    protobuf_AddDesc_learner_2fproto_2fbcd_2eproto();
  }
} static_descriptor_initializer_learner_2fproto_2fbcd_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int BCDConfig::kFeatureBlockRatioFieldNumber;
const int BCDConfig::kRandomFeatureBlockOrderFieldNumber;
const int BCDConfig::kPriorFeaGroupFieldNumber;
const int BCDConfig::kNumIterForPriorFeaGroupFieldNumber;
const int BCDConfig::kMaxBlockDelayFieldNumber;
const int BCDConfig::kMaxPassOfDataFieldNumber;
const int BCDConfig::kEpsilonFieldNumber;
const int BCDConfig::kTailFeatureFreqFieldNumber;
const int BCDConfig::kCountminKFieldNumber;
const int BCDConfig::kCountminNRatioFieldNumber;
const int BCDConfig::kMaxNumParallelGroupsInPreprocessingFieldNumber;
const int BCDConfig::kMaxDataBufSizeInMbFieldNumber;
const int BCDConfig::kLocalCacheFieldNumber;
const int BCDConfig::kInitWFieldNumber;
#endif  // !_MSC_VER

BCDConfig::BCDConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BCDConfig::InitAsDefaultInstance() {
  local_cache_ = const_cast< ::PS::DataConfig*>(&::PS::DataConfig::default_instance());
  init_w_ = const_cast< ::PS::ParameterInitConfig*>(&::PS::ParameterInitConfig::default_instance());
}

BCDConfig::BCDConfig(const BCDConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BCDConfig::SharedCtor() {
  _cached_size_ = 0;
  feature_block_ratio_ = 4;
  random_feature_block_order_ = true;
  num_iter_for_prior_fea_group_ = 5;
  max_block_delay_ = 0;
  max_pass_of_data_ = 10;
  epsilon_ = 0.0001;
  tail_feature_freq_ = 0;
  countmin_k_ = 2;
  countmin_n_ratio_ = 2;
  max_num_parallel_groups_in_preprocessing_ = 1000;
  max_data_buf_size_in_mb_ = 1000;
  local_cache_ = NULL;
  init_w_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BCDConfig::~BCDConfig() {
  SharedDtor();
}

void BCDConfig::SharedDtor() {
  if (this != default_instance_) {
    delete local_cache_;
    delete init_w_;
  }
}

void BCDConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BCDConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BCDConfig_descriptor_;
}

const BCDConfig& BCDConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_learner_2fproto_2fbcd_2eproto();
  return *default_instance_;
}

BCDConfig* BCDConfig::default_instance_ = NULL;

BCDConfig* BCDConfig::New() const {
  return new BCDConfig;
}

void BCDConfig::Clear() {
  _extensions_.Clear();
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    feature_block_ratio_ = 4;
    random_feature_block_order_ = true;
    num_iter_for_prior_fea_group_ = 5;
    max_block_delay_ = 0;
    max_pass_of_data_ = 10;
    epsilon_ = 0.0001;
    tail_feature_freq_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    countmin_k_ = 2;
    countmin_n_ratio_ = 2;
    max_num_parallel_groups_in_preprocessing_ = 1000;
    max_data_buf_size_in_mb_ = 1000;
    if (has_local_cache()) {
      if (local_cache_ != NULL) local_cache_->::PS::DataConfig::Clear();
    }
    if (has_init_w()) {
      if (init_w_ != NULL) init_w_->::PS::ParameterInitConfig::Clear();
    }
  }
  prior_fea_group_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BCDConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float feature_block_ratio = 1 [default = 4];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &feature_block_ratio_)));
          set_has_feature_block_ratio();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_random_feature_block_order;
        break;
      }

      // optional bool random_feature_block_order = 2 [default = true];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_random_feature_block_order:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &random_feature_block_order_)));
          set_has_random_feature_block_order();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_max_block_delay;
        break;
      }

      // optional int32 max_block_delay = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_block_delay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_block_delay_)));
          set_has_max_block_delay();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_max_pass_of_data;
        break;
      }

      // optional int32 max_pass_of_data = 4 [default = 10];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_pass_of_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_pass_of_data_)));
          set_has_max_pass_of_data();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_epsilon;
        break;
      }

      // optional double epsilon = 5 [default = 0.0001];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_epsilon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &epsilon_)));
          set_has_epsilon();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_tail_feature_freq;
        break;
      }

      // optional int32 tail_feature_freq = 6 [default = 0];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tail_feature_freq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tail_feature_freq_)));
          set_has_tail_feature_freq();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_countmin_k;
        break;
      }

      // optional int32 countmin_k = 7 [default = 2];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_countmin_k:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &countmin_k_)));
          set_has_countmin_k();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(65)) goto parse_countmin_n_ratio;
        break;
      }

      // optional double countmin_n_ratio = 8 [default = 2];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_countmin_n_ratio:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &countmin_n_ratio_)));
          set_has_countmin_n_ratio();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_max_num_parallel_groups_in_preprocessing;
        break;
      }

      // optional int32 max_num_parallel_groups_in_preprocessing = 9 [default = 1000];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_num_parallel_groups_in_preprocessing:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_num_parallel_groups_in_preprocessing_)));
          set_has_max_num_parallel_groups_in_preprocessing();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_max_data_buf_size_in_mb;
        break;
      }

      // optional int32 max_data_buf_size_in_mb = 10 [default = 1000];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_data_buf_size_in_mb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_data_buf_size_in_mb_)));
          set_has_max_data_buf_size_in_mb();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_local_cache;
        break;
      }

      // optional .PS.DataConfig local_cache = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_local_cache:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_local_cache()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_init_w;
        break;
      }

      // optional .PS.ParameterInitConfig init_w = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_init_w:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_init_w()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_num_iter_for_prior_fea_group;
        break;
      }

      // optional int32 num_iter_for_prior_fea_group = 13 [default = 5];
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num_iter_for_prior_fea_group:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_iter_for_prior_fea_group_)));
          set_has_num_iter_for_prior_fea_group();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_prior_fea_group;
        break;
      }

      // repeated int32 prior_fea_group = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_prior_fea_group:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 112, input, this->mutable_prior_fea_group())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_prior_fea_group())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_prior_fea_group;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        if ((800u <= tag && tag < 1600u)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BCDConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional float feature_block_ratio = 1 [default = 4];
  if (has_feature_block_ratio()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->feature_block_ratio(), output);
  }

  // optional bool random_feature_block_order = 2 [default = true];
  if (has_random_feature_block_order()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->random_feature_block_order(), output);
  }

  // optional int32 max_block_delay = 3 [default = 0];
  if (has_max_block_delay()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->max_block_delay(), output);
  }

  // optional int32 max_pass_of_data = 4 [default = 10];
  if (has_max_pass_of_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->max_pass_of_data(), output);
  }

  // optional double epsilon = 5 [default = 0.0001];
  if (has_epsilon()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->epsilon(), output);
  }

  // optional int32 tail_feature_freq = 6 [default = 0];
  if (has_tail_feature_freq()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->tail_feature_freq(), output);
  }

  // optional int32 countmin_k = 7 [default = 2];
  if (has_countmin_k()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->countmin_k(), output);
  }

  // optional double countmin_n_ratio = 8 [default = 2];
  if (has_countmin_n_ratio()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->countmin_n_ratio(), output);
  }

  // optional int32 max_num_parallel_groups_in_preprocessing = 9 [default = 1000];
  if (has_max_num_parallel_groups_in_preprocessing()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->max_num_parallel_groups_in_preprocessing(), output);
  }

  // optional int32 max_data_buf_size_in_mb = 10 [default = 1000];
  if (has_max_data_buf_size_in_mb()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->max_data_buf_size_in_mb(), output);
  }

  // optional .PS.DataConfig local_cache = 11;
  if (has_local_cache()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->local_cache(), output);
  }

  // optional .PS.ParameterInitConfig init_w = 12;
  if (has_init_w()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->init_w(), output);
  }

  // optional int32 num_iter_for_prior_fea_group = 13 [default = 5];
  if (has_num_iter_for_prior_fea_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->num_iter_for_prior_fea_group(), output);
  }

  // repeated int32 prior_fea_group = 14;
  for (int i = 0; i < this->prior_fea_group_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      14, this->prior_fea_group(i), output);
  }

  // Extension range [100, 200)
  _extensions_.SerializeWithCachedSizes(
      100, 200, output);

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BCDConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional float feature_block_ratio = 1 [default = 4];
  if (has_feature_block_ratio()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->feature_block_ratio(), target);
  }

  // optional bool random_feature_block_order = 2 [default = true];
  if (has_random_feature_block_order()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->random_feature_block_order(), target);
  }

  // optional int32 max_block_delay = 3 [default = 0];
  if (has_max_block_delay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->max_block_delay(), target);
  }

  // optional int32 max_pass_of_data = 4 [default = 10];
  if (has_max_pass_of_data()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->max_pass_of_data(), target);
  }

  // optional double epsilon = 5 [default = 0.0001];
  if (has_epsilon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->epsilon(), target);
  }

  // optional int32 tail_feature_freq = 6 [default = 0];
  if (has_tail_feature_freq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->tail_feature_freq(), target);
  }

  // optional int32 countmin_k = 7 [default = 2];
  if (has_countmin_k()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->countmin_k(), target);
  }

  // optional double countmin_n_ratio = 8 [default = 2];
  if (has_countmin_n_ratio()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->countmin_n_ratio(), target);
  }

  // optional int32 max_num_parallel_groups_in_preprocessing = 9 [default = 1000];
  if (has_max_num_parallel_groups_in_preprocessing()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->max_num_parallel_groups_in_preprocessing(), target);
  }

  // optional int32 max_data_buf_size_in_mb = 10 [default = 1000];
  if (has_max_data_buf_size_in_mb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->max_data_buf_size_in_mb(), target);
  }

  // optional .PS.DataConfig local_cache = 11;
  if (has_local_cache()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->local_cache(), target);
  }

  // optional .PS.ParameterInitConfig init_w = 12;
  if (has_init_w()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->init_w(), target);
  }

  // optional int32 num_iter_for_prior_fea_group = 13 [default = 5];
  if (has_num_iter_for_prior_fea_group()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->num_iter_for_prior_fea_group(), target);
  }

  // repeated int32 prior_fea_group = 14;
  for (int i = 0; i < this->prior_fea_group_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(14, this->prior_fea_group(i), target);
  }

  // Extension range [100, 200)
  target = _extensions_.SerializeWithCachedSizesToArray(
      100, 200, target);

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BCDConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float feature_block_ratio = 1 [default = 4];
    if (has_feature_block_ratio()) {
      total_size += 1 + 4;
    }

    // optional bool random_feature_block_order = 2 [default = true];
    if (has_random_feature_block_order()) {
      total_size += 1 + 1;
    }

    // optional int32 num_iter_for_prior_fea_group = 13 [default = 5];
    if (has_num_iter_for_prior_fea_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_iter_for_prior_fea_group());
    }

    // optional int32 max_block_delay = 3 [default = 0];
    if (has_max_block_delay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_block_delay());
    }

    // optional int32 max_pass_of_data = 4 [default = 10];
    if (has_max_pass_of_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_pass_of_data());
    }

    // optional double epsilon = 5 [default = 0.0001];
    if (has_epsilon()) {
      total_size += 1 + 8;
    }

    // optional int32 tail_feature_freq = 6 [default = 0];
    if (has_tail_feature_freq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tail_feature_freq());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 countmin_k = 7 [default = 2];
    if (has_countmin_k()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->countmin_k());
    }

    // optional double countmin_n_ratio = 8 [default = 2];
    if (has_countmin_n_ratio()) {
      total_size += 1 + 8;
    }

    // optional int32 max_num_parallel_groups_in_preprocessing = 9 [default = 1000];
    if (has_max_num_parallel_groups_in_preprocessing()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_num_parallel_groups_in_preprocessing());
    }

    // optional int32 max_data_buf_size_in_mb = 10 [default = 1000];
    if (has_max_data_buf_size_in_mb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_data_buf_size_in_mb());
    }

    // optional .PS.DataConfig local_cache = 11;
    if (has_local_cache()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->local_cache());
    }

    // optional .PS.ParameterInitConfig init_w = 12;
    if (has_init_w()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->init_w());
    }

  }
  // repeated int32 prior_fea_group = 14;
  {
    int data_size = 0;
    for (int i = 0; i < this->prior_fea_group_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->prior_fea_group(i));
    }
    total_size += 1 * this->prior_fea_group_size() + data_size;
  }

  total_size += _extensions_.ByteSize();

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BCDConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BCDConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BCDConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BCDConfig::MergeFrom(const BCDConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  prior_fea_group_.MergeFrom(from.prior_fea_group_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_feature_block_ratio()) {
      set_feature_block_ratio(from.feature_block_ratio());
    }
    if (from.has_random_feature_block_order()) {
      set_random_feature_block_order(from.random_feature_block_order());
    }
    if (from.has_num_iter_for_prior_fea_group()) {
      set_num_iter_for_prior_fea_group(from.num_iter_for_prior_fea_group());
    }
    if (from.has_max_block_delay()) {
      set_max_block_delay(from.max_block_delay());
    }
    if (from.has_max_pass_of_data()) {
      set_max_pass_of_data(from.max_pass_of_data());
    }
    if (from.has_epsilon()) {
      set_epsilon(from.epsilon());
    }
    if (from.has_tail_feature_freq()) {
      set_tail_feature_freq(from.tail_feature_freq());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_countmin_k()) {
      set_countmin_k(from.countmin_k());
    }
    if (from.has_countmin_n_ratio()) {
      set_countmin_n_ratio(from.countmin_n_ratio());
    }
    if (from.has_max_num_parallel_groups_in_preprocessing()) {
      set_max_num_parallel_groups_in_preprocessing(from.max_num_parallel_groups_in_preprocessing());
    }
    if (from.has_max_data_buf_size_in_mb()) {
      set_max_data_buf_size_in_mb(from.max_data_buf_size_in_mb());
    }
    if (from.has_local_cache()) {
      mutable_local_cache()->::PS::DataConfig::MergeFrom(from.local_cache());
    }
    if (from.has_init_w()) {
      mutable_init_w()->::PS::ParameterInitConfig::MergeFrom(from.init_w());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BCDConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BCDConfig::CopyFrom(const BCDConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BCDConfig::IsInitialized() const {

  if (has_local_cache()) {
    if (!this->local_cache().IsInitialized()) return false;
  }

  if (!_extensions_.IsInitialized()) return false;  return true;
}

void BCDConfig::Swap(BCDConfig* other) {
  if (other != this) {
    std::swap(feature_block_ratio_, other->feature_block_ratio_);
    std::swap(random_feature_block_order_, other->random_feature_block_order_);
    prior_fea_group_.Swap(&other->prior_fea_group_);
    std::swap(num_iter_for_prior_fea_group_, other->num_iter_for_prior_fea_group_);
    std::swap(max_block_delay_, other->max_block_delay_);
    std::swap(max_pass_of_data_, other->max_pass_of_data_);
    std::swap(epsilon_, other->epsilon_);
    std::swap(tail_feature_freq_, other->tail_feature_freq_);
    std::swap(countmin_k_, other->countmin_k_);
    std::swap(countmin_n_ratio_, other->countmin_n_ratio_);
    std::swap(max_num_parallel_groups_in_preprocessing_, other->max_num_parallel_groups_in_preprocessing_);
    std::swap(max_data_buf_size_in_mb_, other->max_data_buf_size_in_mb_);
    std::swap(local_cache_, other->local_cache_);
    std::swap(init_w_, other->init_w_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.Swap(&other->_extensions_);
  }
}

::google::protobuf::Metadata BCDConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BCDConfig_descriptor_;
  metadata.reflection = BCDConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BCDProgress::kObjectiveFieldNumber;
const int BCDProgress::kRelativeObjFieldNumber;
const int BCDProgress::kNnzWFieldNumber;
const int BCDProgress::kViolationFieldNumber;
const int BCDProgress::kNnzActiveSetFieldNumber;
const int BCDProgress::kTotalTimeFieldNumber;
const int BCDProgress::kBusyTimeFieldNumber;
#endif  // !_MSC_VER

BCDProgress::BCDProgress()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BCDProgress::InitAsDefaultInstance() {
}

BCDProgress::BCDProgress(const BCDProgress& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BCDProgress::SharedCtor() {
  _cached_size_ = 0;
  objective_ = 0;
  relative_obj_ = 0;
  nnz_w_ = GOOGLE_ULONGLONG(0);
  violation_ = 0;
  nnz_active_set_ = GOOGLE_ULONGLONG(0);
  total_time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BCDProgress::~BCDProgress() {
  SharedDtor();
}

void BCDProgress::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BCDProgress::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BCDProgress::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BCDProgress_descriptor_;
}

const BCDProgress& BCDProgress::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_learner_2fproto_2fbcd_2eproto();
  return *default_instance_;
}

BCDProgress* BCDProgress::default_instance_ = NULL;

BCDProgress* BCDProgress::New() const {
  return new BCDProgress;
}

void BCDProgress::Clear() {
  _extensions_.Clear();
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    objective_ = 0;
    relative_obj_ = 0;
    nnz_w_ = GOOGLE_ULONGLONG(0);
    violation_ = 0;
    nnz_active_set_ = GOOGLE_ULONGLONG(0);
    total_time_ = 0;
  }
  busy_time_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BCDProgress::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double objective = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &objective_)));
          set_has_objective();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_relative_obj;
        break;
      }

      // optional double relative_obj = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_relative_obj:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &relative_obj_)));
          set_has_relative_obj();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_nnz_w;
        break;
      }

      // optional uint64 nnz_w = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nnz_w:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &nnz_w_)));
          set_has_nnz_w();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_violation;
        break;
      }

      // optional double violation = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_violation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &violation_)));
          set_has_violation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_nnz_active_set;
        break;
      }

      // optional uint64 nnz_active_set = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nnz_active_set:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &nnz_active_set_)));
          set_has_nnz_active_set();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(81)) goto parse_total_time;
        break;
      }

      // optional double total_time = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_total_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &total_time_)));
          set_has_total_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(89)) goto parse_busy_time;
        break;
      }

      // repeated double busy_time = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_busy_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 89, input, this->mutable_busy_time())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_busy_time())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(89)) goto parse_busy_time;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        if ((800u <= tag && tag < 1600u)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BCDProgress::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional double objective = 1;
  if (has_objective()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->objective(), output);
  }

  // optional double relative_obj = 2;
  if (has_relative_obj()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->relative_obj(), output);
  }

  // optional uint64 nnz_w = 5;
  if (has_nnz_w()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->nnz_w(), output);
  }

  // optional double violation = 6;
  if (has_violation()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->violation(), output);
  }

  // optional uint64 nnz_active_set = 7;
  if (has_nnz_active_set()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->nnz_active_set(), output);
  }

  // optional double total_time = 10;
  if (has_total_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->total_time(), output);
  }

  // repeated double busy_time = 11;
  for (int i = 0; i < this->busy_time_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      11, this->busy_time(i), output);
  }

  // Extension range [100, 200)
  _extensions_.SerializeWithCachedSizes(
      100, 200, output);

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BCDProgress::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional double objective = 1;
  if (has_objective()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->objective(), target);
  }

  // optional double relative_obj = 2;
  if (has_relative_obj()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->relative_obj(), target);
  }

  // optional uint64 nnz_w = 5;
  if (has_nnz_w()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->nnz_w(), target);
  }

  // optional double violation = 6;
  if (has_violation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->violation(), target);
  }

  // optional uint64 nnz_active_set = 7;
  if (has_nnz_active_set()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->nnz_active_set(), target);
  }

  // optional double total_time = 10;
  if (has_total_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->total_time(), target);
  }

  // repeated double busy_time = 11;
  for (int i = 0; i < this->busy_time_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(11, this->busy_time(i), target);
  }

  // Extension range [100, 200)
  target = _extensions_.SerializeWithCachedSizesToArray(
      100, 200, target);

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BCDProgress::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional double objective = 1;
    if (has_objective()) {
      total_size += 1 + 8;
    }

    // optional double relative_obj = 2;
    if (has_relative_obj()) {
      total_size += 1 + 8;
    }

    // optional uint64 nnz_w = 5;
    if (has_nnz_w()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->nnz_w());
    }

    // optional double violation = 6;
    if (has_violation()) {
      total_size += 1 + 8;
    }

    // optional uint64 nnz_active_set = 7;
    if (has_nnz_active_set()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->nnz_active_set());
    }

    // optional double total_time = 10;
    if (has_total_time()) {
      total_size += 1 + 8;
    }

  }
  // repeated double busy_time = 11;
  {
    int data_size = 0;
    data_size = 8 * this->busy_time_size();
    total_size += 1 * this->busy_time_size() + data_size;
  }

  total_size += _extensions_.ByteSize();

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BCDProgress::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BCDProgress* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BCDProgress*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BCDProgress::MergeFrom(const BCDProgress& from) {
  GOOGLE_CHECK_NE(&from, this);
  busy_time_.MergeFrom(from.busy_time_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_objective()) {
      set_objective(from.objective());
    }
    if (from.has_relative_obj()) {
      set_relative_obj(from.relative_obj());
    }
    if (from.has_nnz_w()) {
      set_nnz_w(from.nnz_w());
    }
    if (from.has_violation()) {
      set_violation(from.violation());
    }
    if (from.has_nnz_active_set()) {
      set_nnz_active_set(from.nnz_active_set());
    }
    if (from.has_total_time()) {
      set_total_time(from.total_time());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BCDProgress::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BCDProgress::CopyFrom(const BCDProgress& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BCDProgress::IsInitialized() const {


  if (!_extensions_.IsInitialized()) return false;  return true;
}

void BCDProgress::Swap(BCDProgress* other) {
  if (other != this) {
    std::swap(objective_, other->objective_);
    std::swap(relative_obj_, other->relative_obj_);
    std::swap(nnz_w_, other->nnz_w_);
    std::swap(violation_, other->violation_);
    std::swap(nnz_active_set_, other->nnz_active_set_);
    std::swap(total_time_, other->total_time_);
    busy_time_.Swap(&other->busy_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.Swap(&other->_extensions_);
  }
}

::google::protobuf::Metadata BCDProgress::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BCDProgress_descriptor_;
  metadata.reflection = BCDProgress_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* BCDCall_Command_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BCDCall_Command_descriptor_;
}
bool BCDCall_Command_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const BCDCall_Command BCDCall::LOAD_DATA;
const BCDCall_Command BCDCall::PREPROCESS_DATA;
const BCDCall_Command BCDCall::UPDATE_MODEL;
const BCDCall_Command BCDCall::EVALUATE_PROGRESS;
const BCDCall_Command BCDCall::SAVE_MODEL;
const BCDCall_Command BCDCall::RECOVER;
const BCDCall_Command BCDCall::COMPUTE_VALIDATION_AUC;
const BCDCall_Command BCDCall::Command_MIN;
const BCDCall_Command BCDCall::Command_MAX;
const int BCDCall::Command_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int BCDCall::kCmdFieldNumber;
const int BCDCall::kKeyFieldNumber;
const int BCDCall::kKktFilterThresholdFieldNumber;
const int BCDCall::kResetKktFilterFieldNumber;
const int BCDCall::kFeaGrpFieldNumber;
const int BCDCall::kHitCacheFieldNumber;
const int BCDCall::kDataFieldNumber;
#endif  // !_MSC_VER

BCDCall::BCDCall()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BCDCall::InitAsDefaultInstance() {
  key_ = const_cast< ::PS::PbRange*>(&::PS::PbRange::default_instance());
  data_ = const_cast< ::PS::DataConfig*>(&::PS::DataConfig::default_instance());
}

BCDCall::BCDCall(const BCDCall& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BCDCall::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 1;
  key_ = NULL;
  kkt_filter_threshold_ = 0;
  reset_kkt_filter_ = false;
  hit_cache_ = false;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BCDCall::~BCDCall() {
  SharedDtor();
}

void BCDCall::SharedDtor() {
  if (this != default_instance_) {
    delete key_;
    delete data_;
  }
}

void BCDCall::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BCDCall::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BCDCall_descriptor_;
}

const BCDCall& BCDCall::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_learner_2fproto_2fbcd_2eproto();
  return *default_instance_;
}

BCDCall* BCDCall::default_instance_ = NULL;

BCDCall* BCDCall::New() const {
  return new BCDCall;
}

void BCDCall::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cmd_ = 1;
    if (has_key()) {
      if (key_ != NULL) key_->::PS::PbRange::Clear();
    }
    kkt_filter_threshold_ = 0;
    reset_kkt_filter_ = false;
    hit_cache_ = false;
    if (has_data()) {
      if (data_ != NULL) data_->::PS::DataConfig::Clear();
    }
  }
  fea_grp_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BCDCall::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .PS.BCDCall.Command cmd = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PS::BCDCall_Command_IsValid(value)) {
            set_cmd(static_cast< ::PS::BCDCall_Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_key;
        break;
      }

      // optional .PS.PbRange key = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_key()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_kkt_filter_threshold;
        break;
      }

      // optional double kkt_filter_threshold = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_kkt_filter_threshold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &kkt_filter_threshold_)));
          set_has_kkt_filter_threshold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_reset_kkt_filter;
        break;
      }

      // optional bool reset_kkt_filter = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reset_kkt_filter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &reset_kkt_filter_)));
          set_has_reset_kkt_filter();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_fea_grp;
        break;
      }

      // repeated int32 fea_grp = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fea_grp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 64, input, this->mutable_fea_grp())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_fea_grp())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_fea_grp;
        if (input->ExpectTag(72)) goto parse_hit_cache;
        break;
      }

      // optional bool hit_cache = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hit_cache:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hit_cache_)));
          set_has_hit_cache();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_data;
        break;
      }

      // optional .PS.DataConfig data = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BCDCall::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .PS.BCDCall.Command cmd = 1;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .PS.PbRange key = 2;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->key(), output);
  }

  // optional double kkt_filter_threshold = 4;
  if (has_kkt_filter_threshold()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->kkt_filter_threshold(), output);
  }

  // optional bool reset_kkt_filter = 5;
  if (has_reset_kkt_filter()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->reset_kkt_filter(), output);
  }

  // repeated int32 fea_grp = 8;
  for (int i = 0; i < this->fea_grp_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      8, this->fea_grp(i), output);
  }

  // optional bool hit_cache = 9;
  if (has_hit_cache()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->hit_cache(), output);
  }

  // optional .PS.DataConfig data = 10;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BCDCall::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .PS.BCDCall.Command cmd = 1;
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .PS.PbRange key = 2;
  if (has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->key(), target);
  }

  // optional double kkt_filter_threshold = 4;
  if (has_kkt_filter_threshold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->kkt_filter_threshold(), target);
  }

  // optional bool reset_kkt_filter = 5;
  if (has_reset_kkt_filter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->reset_kkt_filter(), target);
  }

  // repeated int32 fea_grp = 8;
  for (int i = 0; i < this->fea_grp_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(8, this->fea_grp(i), target);
  }

  // optional bool hit_cache = 9;
  if (has_hit_cache()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->hit_cache(), target);
  }

  // optional .PS.DataConfig data = 10;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BCDCall::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .PS.BCDCall.Command cmd = 1;
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .PS.PbRange key = 2;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->key());
    }

    // optional double kkt_filter_threshold = 4;
    if (has_kkt_filter_threshold()) {
      total_size += 1 + 8;
    }

    // optional bool reset_kkt_filter = 5;
    if (has_reset_kkt_filter()) {
      total_size += 1 + 1;
    }

    // optional bool hit_cache = 9;
    if (has_hit_cache()) {
      total_size += 1 + 1;
    }

    // optional .PS.DataConfig data = 10;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  // repeated int32 fea_grp = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->fea_grp_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->fea_grp(i));
    }
    total_size += 1 * this->fea_grp_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BCDCall::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BCDCall* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BCDCall*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BCDCall::MergeFrom(const BCDCall& from) {
  GOOGLE_CHECK_NE(&from, this);
  fea_grp_.MergeFrom(from.fea_grp_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_key()) {
      mutable_key()->::PS::PbRange::MergeFrom(from.key());
    }
    if (from.has_kkt_filter_threshold()) {
      set_kkt_filter_threshold(from.kkt_filter_threshold());
    }
    if (from.has_reset_kkt_filter()) {
      set_reset_kkt_filter(from.reset_kkt_filter());
    }
    if (from.has_hit_cache()) {
      set_hit_cache(from.hit_cache());
    }
    if (from.has_data()) {
      mutable_data()->::PS::DataConfig::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BCDCall::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BCDCall::CopyFrom(const BCDCall& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BCDCall::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_key()) {
    if (!this->key().IsInitialized()) return false;
  }
  if (has_data()) {
    if (!this->data().IsInitialized()) return false;
  }
  return true;
}

void BCDCall::Swap(BCDCall* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(key_, other->key_);
    std::swap(kkt_filter_threshold_, other->kkt_filter_threshold_);
    std::swap(reset_kkt_filter_, other->reset_kkt_filter_);
    fea_grp_.Swap(&other->fea_grp_);
    std::swap(hit_cache_, other->hit_cache_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BCDCall::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BCDCall_descriptor_;
  metadata.reflection = BCDCall_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LoadDataReturn::kExampleInfoFieldNumber;
const int LoadDataReturn::kHitCacheFieldNumber;
#endif  // !_MSC_VER

LoadDataReturn::LoadDataReturn()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LoadDataReturn::InitAsDefaultInstance() {
  example_info_ = const_cast< ::PS::ExampleInfo*>(&::PS::ExampleInfo::default_instance());
}

LoadDataReturn::LoadDataReturn(const LoadDataReturn& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LoadDataReturn::SharedCtor() {
  _cached_size_ = 0;
  example_info_ = NULL;
  hit_cache_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoadDataReturn::~LoadDataReturn() {
  SharedDtor();
}

void LoadDataReturn::SharedDtor() {
  if (this != default_instance_) {
    delete example_info_;
  }
}

void LoadDataReturn::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoadDataReturn::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoadDataReturn_descriptor_;
}

const LoadDataReturn& LoadDataReturn::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_learner_2fproto_2fbcd_2eproto();
  return *default_instance_;
}

LoadDataReturn* LoadDataReturn::default_instance_ = NULL;

LoadDataReturn* LoadDataReturn::New() const {
  return new LoadDataReturn;
}

void LoadDataReturn::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_example_info()) {
      if (example_info_ != NULL) example_info_->::PS::ExampleInfo::Clear();
    }
    hit_cache_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LoadDataReturn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PS.ExampleInfo example_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_example_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_hit_cache;
        break;
      }

      // optional int32 hit_cache = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hit_cache:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hit_cache_)));
          set_has_hit_cache();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LoadDataReturn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PS.ExampleInfo example_info = 1;
  if (has_example_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->example_info(), output);
  }

  // optional int32 hit_cache = 2;
  if (has_hit_cache()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->hit_cache(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LoadDataReturn::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PS.ExampleInfo example_info = 1;
  if (has_example_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->example_info(), target);
  }

  // optional int32 hit_cache = 2;
  if (has_hit_cache()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->hit_cache(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LoadDataReturn::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PS.ExampleInfo example_info = 1;
    if (has_example_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->example_info());
    }

    // optional int32 hit_cache = 2;
    if (has_hit_cache()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hit_cache());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoadDataReturn::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LoadDataReturn* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LoadDataReturn*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LoadDataReturn::MergeFrom(const LoadDataReturn& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_example_info()) {
      mutable_example_info()->::PS::ExampleInfo::MergeFrom(from.example_info());
    }
    if (from.has_hit_cache()) {
      set_hit_cache(from.hit_cache());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LoadDataReturn::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoadDataReturn::CopyFrom(const LoadDataReturn& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoadDataReturn::IsInitialized() const {

  return true;
}

void LoadDataReturn::Swap(LoadDataReturn* other) {
  if (other != this) {
    std::swap(example_info_, other->example_info_);
    std::swap(hit_cache_, other->hit_cache_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LoadDataReturn::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoadDataReturn_descriptor_;
  metadata.reflection = LoadDataReturn_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace PS

// @@protoc_insertion_point(global_scope)
