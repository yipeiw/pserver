// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: app/linear_method/proto/linear.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "app/linear_method/proto/linear.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace PS {
namespace LM {

namespace {

const ::google::protobuf::Descriptor* Config_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Config_reflection_ = NULL;
const ::google::protobuf::Descriptor* SGDConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SGDConfig_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* SGDConfig_Algo_descriptor_ = NULL;
const ::google::protobuf::Descriptor* LossConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LossConfig_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* LossConfig_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* PenaltyConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PenaltyConfig_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* PenaltyConfig_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* LearningRateConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LearningRateConfig_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* LearningRateConfig_Type_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_app_2flinear_5fmethod_2fproto_2flinear_2eproto() {
  protobuf_AddDesc_app_2flinear_5fmethod_2fproto_2flinear_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "app/linear_method/proto/linear.proto");
  GOOGLE_CHECK(file != NULL);
  Config_descriptor_ = file->message_type(0);
  static const int Config_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config, training_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config, validation_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config, model_output_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config, model_input_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config, loss_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config, penalty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config, learning_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config, async_sgd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config, darlin_),
  };
  Config_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Config_descriptor_,
      Config::default_instance_,
      Config_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Config));
  SGDConfig_descriptor_ = file->message_type(1);
  static const int SGDConfig_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SGDConfig, algo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SGDConfig, minibatch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SGDConfig, data_buf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SGDConfig, ada_grad_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SGDConfig, max_delay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SGDConfig, num_data_pass_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SGDConfig, report_interval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SGDConfig, tail_feature_freq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SGDConfig, countmin_n_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SGDConfig, countmin_k_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SGDConfig, fixing_float_by_nbytes_),
  };
  SGDConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SGDConfig_descriptor_,
      SGDConfig::default_instance_,
      SGDConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SGDConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SGDConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SGDConfig));
  SGDConfig_Algo_descriptor_ = SGDConfig_descriptor_->enum_type(0);
  LossConfig_descriptor_ = file->message_type(2);
  static const int LossConfig_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LossConfig, type_),
  };
  LossConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LossConfig_descriptor_,
      LossConfig::default_instance_,
      LossConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LossConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LossConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LossConfig));
  LossConfig_Type_descriptor_ = LossConfig_descriptor_->enum_type(0);
  PenaltyConfig_descriptor_ = file->message_type(3);
  static const int PenaltyConfig_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PenaltyConfig, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PenaltyConfig, lambda_),
  };
  PenaltyConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PenaltyConfig_descriptor_,
      PenaltyConfig::default_instance_,
      PenaltyConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PenaltyConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PenaltyConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PenaltyConfig));
  PenaltyConfig_Type_descriptor_ = PenaltyConfig_descriptor_->enum_type(0);
  LearningRateConfig_descriptor_ = file->message_type(4);
  static const int LearningRateConfig_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LearningRateConfig, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LearningRateConfig, alpha_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LearningRateConfig, beta_),
  };
  LearningRateConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LearningRateConfig_descriptor_,
      LearningRateConfig::default_instance_,
      LearningRateConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LearningRateConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LearningRateConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LearningRateConfig));
  LearningRateConfig_Type_descriptor_ = LearningRateConfig_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_app_2flinear_5fmethod_2fproto_2flinear_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Config_descriptor_, &Config::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SGDConfig_descriptor_, &SGDConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LossConfig_descriptor_, &LossConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PenaltyConfig_descriptor_, &PenaltyConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LearningRateConfig_descriptor_, &LearningRateConfig::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_app_2flinear_5fmethod_2fproto_2flinear_2eproto() {
  delete Config::default_instance_;
  delete Config_reflection_;
  delete SGDConfig::default_instance_;
  delete SGDConfig_reflection_;
  delete LossConfig::default_instance_;
  delete LossConfig_reflection_;
  delete PenaltyConfig::default_instance_;
  delete PenaltyConfig_reflection_;
  delete LearningRateConfig::default_instance_;
  delete LearningRateConfig_reflection_;
}

void protobuf_AddDesc_app_2flinear_5fmethod_2fproto_2flinear_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::PS::protobuf_AddDesc_data_2fproto_2fdata_2eproto();
  ::PS::protobuf_AddDesc_learner_2fproto_2fbcd_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n$app/linear_method/proto/linear.proto\022\005"
    "PS.LM\032\025data/proto/data.proto\032\027learner/pr"
    "oto/bcd.proto\"\341\002\n\006Config\022%\n\rtraining_dat"
    "a\030\001 \001(\0132\016.PS.DataConfig\022\'\n\017validation_da"
    "ta\030\002 \001(\0132\016.PS.DataConfig\022$\n\014model_output"
    "\030\004 \001(\0132\016.PS.DataConfig\022#\n\013model_input\030\005 "
    "\001(\0132\016.PS.DataConfig\022\037\n\004loss\030\n \001(\0132\021.PS.L"
    "M.LossConfig\022%\n\007penalty\030\013 \001(\0132\024.PS.LM.Pe"
    "naltyConfig\0220\n\rlearning_rate\030\014 \001(\0132\031.PS."
    "LM.LearningRateConfig\022#\n\tasync_sgd\030\021 \001(\013"
    "2\020.PS.LM.SGDConfig\022\035\n\006darlin\030\017 \001(\0132\r.PS."
    "BCDConfig\"\330\002\n\tSGDConfig\022#\n\004algo\030\001 \002(\0162\025."
    "PS.LM.SGDConfig.Algo\022\027\n\tminibatch\030\002 \001(\005:"
    "\0041000\022\026\n\010data_buf\030\014 \001(\005:\0041000\022\026\n\010ada_gra"
    "d\030\005 \001(\010:\004true\022\024\n\tmax_delay\030\004 \001(\005:\0010\022\030\n\rn"
    "um_data_pass\030\013 \001(\005:\0011\022\032\n\017report_interval"
    "\030\003 \001(\005:\0011\022\034\n\021tail_feature_freq\030\006 \001(\005:\0010\022"
    "\031\n\ncountmin_n\030\010 \001(\002:\0051e+08\022\025\n\ncountmin_k"
    "\030\007 \001(\005:\0012\022!\n\026fixing_float_by_nbytes\030\r \001("
    "\005:\0010\"\036\n\004Algo\022\014\n\010STANDARD\020\001\022\010\n\004FTRL\020\002\"n\n\n"
    "LossConfig\022$\n\004type\030\001 \002(\0162\026.PS.LM.LossCon"
    "fig.Type\":\n\004Type\022\n\n\006SQUARE\020\001\022\t\n\005LOGIT\020\002\022"
    "\t\n\005HINGE\020\003\022\020\n\014SQUARE_HINGE\020\004\"`\n\rPenaltyC"
    "onfig\022\'\n\004type\030\001 \002(\0162\031.PS.LM.PenaltyConfi"
    "g.Type\022\016\n\006lambda\030\002 \003(\001\"\026\n\004Type\022\006\n\002L1\020\001\022\006"
    "\n\002L2\020\002\"\200\001\n\022LearningRateConfig\022,\n\004type\030\001 "
    "\001(\0162\036.PS.LM.LearningRateConfig.Type\022\r\n\005a"
    "lpha\030\002 \001(\001\022\014\n\004beta\030\003 \001(\001\"\037\n\004Type\022\014\n\010CONS"
    "TANT\020\001\022\t\n\005DECAY\020\002:*\n\020delta_init_value\022\r."
    "PS.BCDConfig\030e \001(\001:\0011:)\n\017delta_max_value"
    "\022\r.PS.BCDConfig\030f \001(\001:\0015:5\n\032kkt_filter_t"
    "hreshold_ratio\022\r.PS.BCDConfig\030g \001(\001:\00210", 1279);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "app/linear_method/proto/linear.proto", &protobuf_RegisterTypes);
  Config::default_instance_ = new Config();
  SGDConfig::default_instance_ = new SGDConfig();
  LossConfig::default_instance_ = new LossConfig();
  PenaltyConfig::default_instance_ = new PenaltyConfig();
  LearningRateConfig::default_instance_ = new LearningRateConfig();
  ::google::protobuf::internal::ExtensionSet::RegisterExtension(
    &::PS::BCDConfig::default_instance(),
    101, 1, false, false);
  ::google::protobuf::internal::ExtensionSet::RegisterExtension(
    &::PS::BCDConfig::default_instance(),
    102, 1, false, false);
  ::google::protobuf::internal::ExtensionSet::RegisterExtension(
    &::PS::BCDConfig::default_instance(),
    103, 1, false, false);
  Config::default_instance_->InitAsDefaultInstance();
  SGDConfig::default_instance_->InitAsDefaultInstance();
  LossConfig::default_instance_->InitAsDefaultInstance();
  PenaltyConfig::default_instance_->InitAsDefaultInstance();
  LearningRateConfig::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_app_2flinear_5fmethod_2fproto_2flinear_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_app_2flinear_5fmethod_2fproto_2flinear_2eproto {
  StaticDescriptorInitializer_app_2flinear_5fmethod_2fproto_2flinear_2eproto() {
    protobuf_AddDesc_app_2flinear_5fmethod_2fproto_2flinear_2eproto();
  }
} static_descriptor_initializer_app_2flinear_5fmethod_2fproto_2flinear_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Config::kTrainingDataFieldNumber;
const int Config::kValidationDataFieldNumber;
const int Config::kModelOutputFieldNumber;
const int Config::kModelInputFieldNumber;
const int Config::kLossFieldNumber;
const int Config::kPenaltyFieldNumber;
const int Config::kLearningRateFieldNumber;
const int Config::kAsyncSgdFieldNumber;
const int Config::kDarlinFieldNumber;
#endif  // !_MSC_VER

Config::Config()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Config::InitAsDefaultInstance() {
  training_data_ = const_cast< ::PS::DataConfig*>(&::PS::DataConfig::default_instance());
  validation_data_ = const_cast< ::PS::DataConfig*>(&::PS::DataConfig::default_instance());
  model_output_ = const_cast< ::PS::DataConfig*>(&::PS::DataConfig::default_instance());
  model_input_ = const_cast< ::PS::DataConfig*>(&::PS::DataConfig::default_instance());
  loss_ = const_cast< ::PS::LM::LossConfig*>(&::PS::LM::LossConfig::default_instance());
  penalty_ = const_cast< ::PS::LM::PenaltyConfig*>(&::PS::LM::PenaltyConfig::default_instance());
  learning_rate_ = const_cast< ::PS::LM::LearningRateConfig*>(&::PS::LM::LearningRateConfig::default_instance());
  async_sgd_ = const_cast< ::PS::LM::SGDConfig*>(&::PS::LM::SGDConfig::default_instance());
  darlin_ = const_cast< ::PS::BCDConfig*>(&::PS::BCDConfig::default_instance());
}

Config::Config(const Config& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Config::SharedCtor() {
  _cached_size_ = 0;
  training_data_ = NULL;
  validation_data_ = NULL;
  model_output_ = NULL;
  model_input_ = NULL;
  loss_ = NULL;
  penalty_ = NULL;
  learning_rate_ = NULL;
  async_sgd_ = NULL;
  darlin_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Config::~Config() {
  SharedDtor();
}

void Config::SharedDtor() {
  if (this != default_instance_) {
    delete training_data_;
    delete validation_data_;
    delete model_output_;
    delete model_input_;
    delete loss_;
    delete penalty_;
    delete learning_rate_;
    delete async_sgd_;
    delete darlin_;
  }
}

void Config::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Config::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Config_descriptor_;
}

const Config& Config::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_app_2flinear_5fmethod_2fproto_2flinear_2eproto();
  return *default_instance_;
}

Config* Config::default_instance_ = NULL;

Config* Config::New() const {
  return new Config;
}

void Config::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_training_data()) {
      if (training_data_ != NULL) training_data_->::PS::DataConfig::Clear();
    }
    if (has_validation_data()) {
      if (validation_data_ != NULL) validation_data_->::PS::DataConfig::Clear();
    }
    if (has_model_output()) {
      if (model_output_ != NULL) model_output_->::PS::DataConfig::Clear();
    }
    if (has_model_input()) {
      if (model_input_ != NULL) model_input_->::PS::DataConfig::Clear();
    }
    if (has_loss()) {
      if (loss_ != NULL) loss_->::PS::LM::LossConfig::Clear();
    }
    if (has_penalty()) {
      if (penalty_ != NULL) penalty_->::PS::LM::PenaltyConfig::Clear();
    }
    if (has_learning_rate()) {
      if (learning_rate_ != NULL) learning_rate_->::PS::LM::LearningRateConfig::Clear();
    }
    if (has_async_sgd()) {
      if (async_sgd_ != NULL) async_sgd_->::PS::LM::SGDConfig::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_darlin()) {
      if (darlin_ != NULL) darlin_->::PS::BCDConfig::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Config::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PS.DataConfig training_data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_training_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_validation_data;
        break;
      }

      // optional .PS.DataConfig validation_data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_validation_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_validation_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_model_output;
        break;
      }

      // optional .PS.DataConfig model_output = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_model_output:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_model_output()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_model_input;
        break;
      }

      // optional .PS.DataConfig model_input = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_model_input:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_model_input()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_loss;
        break;
      }

      // optional .PS.LM.LossConfig loss = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_loss:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_loss()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_penalty;
        break;
      }

      // optional .PS.LM.PenaltyConfig penalty = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_penalty:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_penalty()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_learning_rate;
        break;
      }

      // optional .PS.LM.LearningRateConfig learning_rate = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_learning_rate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_learning_rate()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_darlin;
        break;
      }

      // optional .PS.BCDConfig darlin = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_darlin:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_darlin()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_async_sgd;
        break;
      }

      // optional .PS.LM.SGDConfig async_sgd = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_async_sgd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_async_sgd()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Config::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PS.DataConfig training_data = 1;
  if (has_training_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->training_data(), output);
  }

  // optional .PS.DataConfig validation_data = 2;
  if (has_validation_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->validation_data(), output);
  }

  // optional .PS.DataConfig model_output = 4;
  if (has_model_output()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->model_output(), output);
  }

  // optional .PS.DataConfig model_input = 5;
  if (has_model_input()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->model_input(), output);
  }

  // optional .PS.LM.LossConfig loss = 10;
  if (has_loss()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->loss(), output);
  }

  // optional .PS.LM.PenaltyConfig penalty = 11;
  if (has_penalty()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->penalty(), output);
  }

  // optional .PS.LM.LearningRateConfig learning_rate = 12;
  if (has_learning_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->learning_rate(), output);
  }

  // optional .PS.BCDConfig darlin = 15;
  if (has_darlin()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->darlin(), output);
  }

  // optional .PS.LM.SGDConfig async_sgd = 17;
  if (has_async_sgd()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->async_sgd(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Config::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PS.DataConfig training_data = 1;
  if (has_training_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->training_data(), target);
  }

  // optional .PS.DataConfig validation_data = 2;
  if (has_validation_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->validation_data(), target);
  }

  // optional .PS.DataConfig model_output = 4;
  if (has_model_output()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->model_output(), target);
  }

  // optional .PS.DataConfig model_input = 5;
  if (has_model_input()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->model_input(), target);
  }

  // optional .PS.LM.LossConfig loss = 10;
  if (has_loss()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->loss(), target);
  }

  // optional .PS.LM.PenaltyConfig penalty = 11;
  if (has_penalty()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->penalty(), target);
  }

  // optional .PS.LM.LearningRateConfig learning_rate = 12;
  if (has_learning_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->learning_rate(), target);
  }

  // optional .PS.BCDConfig darlin = 15;
  if (has_darlin()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->darlin(), target);
  }

  // optional .PS.LM.SGDConfig async_sgd = 17;
  if (has_async_sgd()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->async_sgd(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Config::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PS.DataConfig training_data = 1;
    if (has_training_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->training_data());
    }

    // optional .PS.DataConfig validation_data = 2;
    if (has_validation_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->validation_data());
    }

    // optional .PS.DataConfig model_output = 4;
    if (has_model_output()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->model_output());
    }

    // optional .PS.DataConfig model_input = 5;
    if (has_model_input()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->model_input());
    }

    // optional .PS.LM.LossConfig loss = 10;
    if (has_loss()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->loss());
    }

    // optional .PS.LM.PenaltyConfig penalty = 11;
    if (has_penalty()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->penalty());
    }

    // optional .PS.LM.LearningRateConfig learning_rate = 12;
    if (has_learning_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->learning_rate());
    }

    // optional .PS.LM.SGDConfig async_sgd = 17;
    if (has_async_sgd()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->async_sgd());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .PS.BCDConfig darlin = 15;
    if (has_darlin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->darlin());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Config::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Config* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Config*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Config::MergeFrom(const Config& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_training_data()) {
      mutable_training_data()->::PS::DataConfig::MergeFrom(from.training_data());
    }
    if (from.has_validation_data()) {
      mutable_validation_data()->::PS::DataConfig::MergeFrom(from.validation_data());
    }
    if (from.has_model_output()) {
      mutable_model_output()->::PS::DataConfig::MergeFrom(from.model_output());
    }
    if (from.has_model_input()) {
      mutable_model_input()->::PS::DataConfig::MergeFrom(from.model_input());
    }
    if (from.has_loss()) {
      mutable_loss()->::PS::LM::LossConfig::MergeFrom(from.loss());
    }
    if (from.has_penalty()) {
      mutable_penalty()->::PS::LM::PenaltyConfig::MergeFrom(from.penalty());
    }
    if (from.has_learning_rate()) {
      mutable_learning_rate()->::PS::LM::LearningRateConfig::MergeFrom(from.learning_rate());
    }
    if (from.has_async_sgd()) {
      mutable_async_sgd()->::PS::LM::SGDConfig::MergeFrom(from.async_sgd());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_darlin()) {
      mutable_darlin()->::PS::BCDConfig::MergeFrom(from.darlin());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Config::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Config::CopyFrom(const Config& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Config::IsInitialized() const {

  if (has_training_data()) {
    if (!this->training_data().IsInitialized()) return false;
  }
  if (has_validation_data()) {
    if (!this->validation_data().IsInitialized()) return false;
  }
  if (has_model_output()) {
    if (!this->model_output().IsInitialized()) return false;
  }
  if (has_model_input()) {
    if (!this->model_input().IsInitialized()) return false;
  }
  if (has_loss()) {
    if (!this->loss().IsInitialized()) return false;
  }
  if (has_penalty()) {
    if (!this->penalty().IsInitialized()) return false;
  }
  if (has_async_sgd()) {
    if (!this->async_sgd().IsInitialized()) return false;
  }
  if (has_darlin()) {
    if (!this->darlin().IsInitialized()) return false;
  }
  return true;
}

void Config::Swap(Config* other) {
  if (other != this) {
    std::swap(training_data_, other->training_data_);
    std::swap(validation_data_, other->validation_data_);
    std::swap(model_output_, other->model_output_);
    std::swap(model_input_, other->model_input_);
    std::swap(loss_, other->loss_);
    std::swap(penalty_, other->penalty_);
    std::swap(learning_rate_, other->learning_rate_);
    std::swap(async_sgd_, other->async_sgd_);
    std::swap(darlin_, other->darlin_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Config::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Config_descriptor_;
  metadata.reflection = Config_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* SGDConfig_Algo_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SGDConfig_Algo_descriptor_;
}
bool SGDConfig_Algo_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const SGDConfig_Algo SGDConfig::STANDARD;
const SGDConfig_Algo SGDConfig::FTRL;
const SGDConfig_Algo SGDConfig::Algo_MIN;
const SGDConfig_Algo SGDConfig::Algo_MAX;
const int SGDConfig::Algo_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int SGDConfig::kAlgoFieldNumber;
const int SGDConfig::kMinibatchFieldNumber;
const int SGDConfig::kDataBufFieldNumber;
const int SGDConfig::kAdaGradFieldNumber;
const int SGDConfig::kMaxDelayFieldNumber;
const int SGDConfig::kNumDataPassFieldNumber;
const int SGDConfig::kReportIntervalFieldNumber;
const int SGDConfig::kTailFeatureFreqFieldNumber;
const int SGDConfig::kCountminNFieldNumber;
const int SGDConfig::kCountminKFieldNumber;
const int SGDConfig::kFixingFloatByNbytesFieldNumber;
#endif  // !_MSC_VER

SGDConfig::SGDConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SGDConfig::InitAsDefaultInstance() {
}

SGDConfig::SGDConfig(const SGDConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SGDConfig::SharedCtor() {
  _cached_size_ = 0;
  algo_ = 1;
  minibatch_ = 1000;
  data_buf_ = 1000;
  ada_grad_ = true;
  max_delay_ = 0;
  num_data_pass_ = 1;
  report_interval_ = 1;
  tail_feature_freq_ = 0;
  countmin_n_ = 1e+08f;
  countmin_k_ = 2;
  fixing_float_by_nbytes_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SGDConfig::~SGDConfig() {
  SharedDtor();
}

void SGDConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SGDConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SGDConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SGDConfig_descriptor_;
}

const SGDConfig& SGDConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_app_2flinear_5fmethod_2fproto_2flinear_2eproto();
  return *default_instance_;
}

SGDConfig* SGDConfig::default_instance_ = NULL;

SGDConfig* SGDConfig::New() const {
  return new SGDConfig;
}

void SGDConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    algo_ = 1;
    minibatch_ = 1000;
    data_buf_ = 1000;
    ada_grad_ = true;
    max_delay_ = 0;
    num_data_pass_ = 1;
    report_interval_ = 1;
    tail_feature_freq_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    countmin_n_ = 1e+08f;
    countmin_k_ = 2;
    fixing_float_by_nbytes_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SGDConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .PS.LM.SGDConfig.Algo algo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PS::LM::SGDConfig_Algo_IsValid(value)) {
            set_algo(static_cast< ::PS::LM::SGDConfig_Algo >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_minibatch;
        break;
      }

      // optional int32 minibatch = 2 [default = 1000];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_minibatch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &minibatch_)));
          set_has_minibatch();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_report_interval;
        break;
      }

      // optional int32 report_interval = 3 [default = 1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_report_interval:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &report_interval_)));
          set_has_report_interval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_max_delay;
        break;
      }

      // optional int32 max_delay = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_delay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_delay_)));
          set_has_max_delay();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_ada_grad;
        break;
      }

      // optional bool ada_grad = 5 [default = true];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ada_grad:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ada_grad_)));
          set_has_ada_grad();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_tail_feature_freq;
        break;
      }

      // optional int32 tail_feature_freq = 6 [default = 0];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tail_feature_freq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tail_feature_freq_)));
          set_has_tail_feature_freq();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_countmin_k;
        break;
      }

      // optional int32 countmin_k = 7 [default = 2];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_countmin_k:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &countmin_k_)));
          set_has_countmin_k();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_countmin_n;
        break;
      }

      // optional float countmin_n = 8 [default = 1e+08];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_countmin_n:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &countmin_n_)));
          set_has_countmin_n();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_num_data_pass;
        break;
      }

      // optional int32 num_data_pass = 11 [default = 1];
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num_data_pass:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_data_pass_)));
          set_has_num_data_pass();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_data_buf;
        break;
      }

      // optional int32 data_buf = 12 [default = 1000];
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_data_buf:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &data_buf_)));
          set_has_data_buf();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_fixing_float_by_nbytes;
        break;
      }

      // optional int32 fixing_float_by_nbytes = 13 [default = 0];
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fixing_float_by_nbytes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fixing_float_by_nbytes_)));
          set_has_fixing_float_by_nbytes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SGDConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .PS.LM.SGDConfig.Algo algo = 1;
  if (has_algo()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->algo(), output);
  }

  // optional int32 minibatch = 2 [default = 1000];
  if (has_minibatch()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->minibatch(), output);
  }

  // optional int32 report_interval = 3 [default = 1];
  if (has_report_interval()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->report_interval(), output);
  }

  // optional int32 max_delay = 4 [default = 0];
  if (has_max_delay()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->max_delay(), output);
  }

  // optional bool ada_grad = 5 [default = true];
  if (has_ada_grad()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->ada_grad(), output);
  }

  // optional int32 tail_feature_freq = 6 [default = 0];
  if (has_tail_feature_freq()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->tail_feature_freq(), output);
  }

  // optional int32 countmin_k = 7 [default = 2];
  if (has_countmin_k()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->countmin_k(), output);
  }

  // optional float countmin_n = 8 [default = 1e+08];
  if (has_countmin_n()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->countmin_n(), output);
  }

  // optional int32 num_data_pass = 11 [default = 1];
  if (has_num_data_pass()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->num_data_pass(), output);
  }

  // optional int32 data_buf = 12 [default = 1000];
  if (has_data_buf()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->data_buf(), output);
  }

  // optional int32 fixing_float_by_nbytes = 13 [default = 0];
  if (has_fixing_float_by_nbytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->fixing_float_by_nbytes(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SGDConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .PS.LM.SGDConfig.Algo algo = 1;
  if (has_algo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->algo(), target);
  }

  // optional int32 minibatch = 2 [default = 1000];
  if (has_minibatch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->minibatch(), target);
  }

  // optional int32 report_interval = 3 [default = 1];
  if (has_report_interval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->report_interval(), target);
  }

  // optional int32 max_delay = 4 [default = 0];
  if (has_max_delay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->max_delay(), target);
  }

  // optional bool ada_grad = 5 [default = true];
  if (has_ada_grad()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->ada_grad(), target);
  }

  // optional int32 tail_feature_freq = 6 [default = 0];
  if (has_tail_feature_freq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->tail_feature_freq(), target);
  }

  // optional int32 countmin_k = 7 [default = 2];
  if (has_countmin_k()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->countmin_k(), target);
  }

  // optional float countmin_n = 8 [default = 1e+08];
  if (has_countmin_n()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->countmin_n(), target);
  }

  // optional int32 num_data_pass = 11 [default = 1];
  if (has_num_data_pass()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->num_data_pass(), target);
  }

  // optional int32 data_buf = 12 [default = 1000];
  if (has_data_buf()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->data_buf(), target);
  }

  // optional int32 fixing_float_by_nbytes = 13 [default = 0];
  if (has_fixing_float_by_nbytes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->fixing_float_by_nbytes(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SGDConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .PS.LM.SGDConfig.Algo algo = 1;
    if (has_algo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->algo());
    }

    // optional int32 minibatch = 2 [default = 1000];
    if (has_minibatch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->minibatch());
    }

    // optional int32 data_buf = 12 [default = 1000];
    if (has_data_buf()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->data_buf());
    }

    // optional bool ada_grad = 5 [default = true];
    if (has_ada_grad()) {
      total_size += 1 + 1;
    }

    // optional int32 max_delay = 4 [default = 0];
    if (has_max_delay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_delay());
    }

    // optional int32 num_data_pass = 11 [default = 1];
    if (has_num_data_pass()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_data_pass());
    }

    // optional int32 report_interval = 3 [default = 1];
    if (has_report_interval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->report_interval());
    }

    // optional int32 tail_feature_freq = 6 [default = 0];
    if (has_tail_feature_freq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tail_feature_freq());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional float countmin_n = 8 [default = 1e+08];
    if (has_countmin_n()) {
      total_size += 1 + 4;
    }

    // optional int32 countmin_k = 7 [default = 2];
    if (has_countmin_k()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->countmin_k());
    }

    // optional int32 fixing_float_by_nbytes = 13 [default = 0];
    if (has_fixing_float_by_nbytes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fixing_float_by_nbytes());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SGDConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SGDConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SGDConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SGDConfig::MergeFrom(const SGDConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_algo()) {
      set_algo(from.algo());
    }
    if (from.has_minibatch()) {
      set_minibatch(from.minibatch());
    }
    if (from.has_data_buf()) {
      set_data_buf(from.data_buf());
    }
    if (from.has_ada_grad()) {
      set_ada_grad(from.ada_grad());
    }
    if (from.has_max_delay()) {
      set_max_delay(from.max_delay());
    }
    if (from.has_num_data_pass()) {
      set_num_data_pass(from.num_data_pass());
    }
    if (from.has_report_interval()) {
      set_report_interval(from.report_interval());
    }
    if (from.has_tail_feature_freq()) {
      set_tail_feature_freq(from.tail_feature_freq());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_countmin_n()) {
      set_countmin_n(from.countmin_n());
    }
    if (from.has_countmin_k()) {
      set_countmin_k(from.countmin_k());
    }
    if (from.has_fixing_float_by_nbytes()) {
      set_fixing_float_by_nbytes(from.fixing_float_by_nbytes());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SGDConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SGDConfig::CopyFrom(const SGDConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SGDConfig::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SGDConfig::Swap(SGDConfig* other) {
  if (other != this) {
    std::swap(algo_, other->algo_);
    std::swap(minibatch_, other->minibatch_);
    std::swap(data_buf_, other->data_buf_);
    std::swap(ada_grad_, other->ada_grad_);
    std::swap(max_delay_, other->max_delay_);
    std::swap(num_data_pass_, other->num_data_pass_);
    std::swap(report_interval_, other->report_interval_);
    std::swap(tail_feature_freq_, other->tail_feature_freq_);
    std::swap(countmin_n_, other->countmin_n_);
    std::swap(countmin_k_, other->countmin_k_);
    std::swap(fixing_float_by_nbytes_, other->fixing_float_by_nbytes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SGDConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SGDConfig_descriptor_;
  metadata.reflection = SGDConfig_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* LossConfig_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LossConfig_Type_descriptor_;
}
bool LossConfig_Type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const LossConfig_Type LossConfig::SQUARE;
const LossConfig_Type LossConfig::LOGIT;
const LossConfig_Type LossConfig::HINGE;
const LossConfig_Type LossConfig::SQUARE_HINGE;
const LossConfig_Type LossConfig::Type_MIN;
const LossConfig_Type LossConfig::Type_MAX;
const int LossConfig::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int LossConfig::kTypeFieldNumber;
#endif  // !_MSC_VER

LossConfig::LossConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LossConfig::InitAsDefaultInstance() {
}

LossConfig::LossConfig(const LossConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LossConfig::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LossConfig::~LossConfig() {
  SharedDtor();
}

void LossConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LossConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LossConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LossConfig_descriptor_;
}

const LossConfig& LossConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_app_2flinear_5fmethod_2fproto_2flinear_2eproto();
  return *default_instance_;
}

LossConfig* LossConfig::default_instance_ = NULL;

LossConfig* LossConfig::New() const {
  return new LossConfig;
}

void LossConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LossConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .PS.LM.LossConfig.Type type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PS::LM::LossConfig_Type_IsValid(value)) {
            set_type(static_cast< ::PS::LM::LossConfig_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LossConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .PS.LM.LossConfig.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LossConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .PS.LM.LossConfig.Type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LossConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .PS.LM.LossConfig.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LossConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LossConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LossConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LossConfig::MergeFrom(const LossConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LossConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LossConfig::CopyFrom(const LossConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LossConfig::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void LossConfig::Swap(LossConfig* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LossConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LossConfig_descriptor_;
  metadata.reflection = LossConfig_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* PenaltyConfig_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PenaltyConfig_Type_descriptor_;
}
bool PenaltyConfig_Type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const PenaltyConfig_Type PenaltyConfig::L1;
const PenaltyConfig_Type PenaltyConfig::L2;
const PenaltyConfig_Type PenaltyConfig::Type_MIN;
const PenaltyConfig_Type PenaltyConfig::Type_MAX;
const int PenaltyConfig::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int PenaltyConfig::kTypeFieldNumber;
const int PenaltyConfig::kLambdaFieldNumber;
#endif  // !_MSC_VER

PenaltyConfig::PenaltyConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PenaltyConfig::InitAsDefaultInstance() {
}

PenaltyConfig::PenaltyConfig(const PenaltyConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PenaltyConfig::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PenaltyConfig::~PenaltyConfig() {
  SharedDtor();
}

void PenaltyConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PenaltyConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PenaltyConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PenaltyConfig_descriptor_;
}

const PenaltyConfig& PenaltyConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_app_2flinear_5fmethod_2fproto_2flinear_2eproto();
  return *default_instance_;
}

PenaltyConfig* PenaltyConfig::default_instance_ = NULL;

PenaltyConfig* PenaltyConfig::New() const {
  return new PenaltyConfig;
}

void PenaltyConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
  }
  lambda_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PenaltyConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .PS.LM.PenaltyConfig.Type type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PS::LM::PenaltyConfig_Type_IsValid(value)) {
            set_type(static_cast< ::PS::LM::PenaltyConfig_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_lambda;
        break;
      }

      // repeated double lambda = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_lambda:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 17, input, this->mutable_lambda())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_lambda())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_lambda;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PenaltyConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .PS.LM.PenaltyConfig.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // repeated double lambda = 2;
  for (int i = 0; i < this->lambda_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      2, this->lambda(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PenaltyConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .PS.LM.PenaltyConfig.Type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // repeated double lambda = 2;
  for (int i = 0; i < this->lambda_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(2, this->lambda(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PenaltyConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .PS.LM.PenaltyConfig.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  // repeated double lambda = 2;
  {
    int data_size = 0;
    data_size = 8 * this->lambda_size();
    total_size += 1 * this->lambda_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PenaltyConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PenaltyConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PenaltyConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PenaltyConfig::MergeFrom(const PenaltyConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  lambda_.MergeFrom(from.lambda_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PenaltyConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PenaltyConfig::CopyFrom(const PenaltyConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PenaltyConfig::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void PenaltyConfig::Swap(PenaltyConfig* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    lambda_.Swap(&other->lambda_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PenaltyConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PenaltyConfig_descriptor_;
  metadata.reflection = PenaltyConfig_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* LearningRateConfig_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LearningRateConfig_Type_descriptor_;
}
bool LearningRateConfig_Type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const LearningRateConfig_Type LearningRateConfig::CONSTANT;
const LearningRateConfig_Type LearningRateConfig::DECAY;
const LearningRateConfig_Type LearningRateConfig::Type_MIN;
const LearningRateConfig_Type LearningRateConfig::Type_MAX;
const int LearningRateConfig::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int LearningRateConfig::kTypeFieldNumber;
const int LearningRateConfig::kAlphaFieldNumber;
const int LearningRateConfig::kBetaFieldNumber;
#endif  // !_MSC_VER

LearningRateConfig::LearningRateConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LearningRateConfig::InitAsDefaultInstance() {
}

LearningRateConfig::LearningRateConfig(const LearningRateConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LearningRateConfig::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  alpha_ = 0;
  beta_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LearningRateConfig::~LearningRateConfig() {
  SharedDtor();
}

void LearningRateConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LearningRateConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LearningRateConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LearningRateConfig_descriptor_;
}

const LearningRateConfig& LearningRateConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_app_2flinear_5fmethod_2fproto_2flinear_2eproto();
  return *default_instance_;
}

LearningRateConfig* LearningRateConfig::default_instance_ = NULL;

LearningRateConfig* LearningRateConfig::New() const {
  return new LearningRateConfig;
}

void LearningRateConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
    alpha_ = 0;
    beta_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LearningRateConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PS.LM.LearningRateConfig.Type type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PS::LM::LearningRateConfig_Type_IsValid(value)) {
            set_type(static_cast< ::PS::LM::LearningRateConfig_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_alpha;
        break;
      }

      // optional double alpha = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_alpha:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &alpha_)));
          set_has_alpha();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_beta;
        break;
      }

      // optional double beta = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_beta:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &beta_)));
          set_has_beta();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LearningRateConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PS.LM.LearningRateConfig.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional double alpha = 2;
  if (has_alpha()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->alpha(), output);
  }

  // optional double beta = 3;
  if (has_beta()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->beta(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LearningRateConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PS.LM.LearningRateConfig.Type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional double alpha = 2;
  if (has_alpha()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->alpha(), target);
  }

  // optional double beta = 3;
  if (has_beta()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->beta(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LearningRateConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PS.LM.LearningRateConfig.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional double alpha = 2;
    if (has_alpha()) {
      total_size += 1 + 8;
    }

    // optional double beta = 3;
    if (has_beta()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LearningRateConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LearningRateConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LearningRateConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LearningRateConfig::MergeFrom(const LearningRateConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_alpha()) {
      set_alpha(from.alpha());
    }
    if (from.has_beta()) {
      set_beta(from.beta());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LearningRateConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LearningRateConfig::CopyFrom(const LearningRateConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LearningRateConfig::IsInitialized() const {

  return true;
}

void LearningRateConfig::Swap(LearningRateConfig* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(alpha_, other->alpha_);
    std::swap(beta_, other->beta_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LearningRateConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LearningRateConfig_descriptor_;
  metadata.reflection = LearningRateConfig_reflection_;
  return metadata;
}

::google::protobuf::internal::ExtensionIdentifier< ::PS::BCDConfig,
    ::google::protobuf::internal::PrimitiveTypeTraits< double >, 1, false >
  delta_init_value(kDeltaInitValueFieldNumber, 1);
::google::protobuf::internal::ExtensionIdentifier< ::PS::BCDConfig,
    ::google::protobuf::internal::PrimitiveTypeTraits< double >, 1, false >
  delta_max_value(kDeltaMaxValueFieldNumber, 5);
::google::protobuf::internal::ExtensionIdentifier< ::PS::BCDConfig,
    ::google::protobuf::internal::PrimitiveTypeTraits< double >, 1, false >
  kkt_filter_threshold_ratio(kKktFilterThresholdRatioFieldNumber, 10);

// @@protoc_insertion_point(namespace_scope)

}  // namespace LM
}  // namespace PS

// @@protoc_insertion_point(global_scope)
