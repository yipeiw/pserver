// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: factor_machine/proto/fm.proto

#ifndef PROTOBUF_factor_5fmachine_2fproto_2ffm_2eproto__INCLUDED
#define PROTOBUF_factor_5fmachine_2fproto_2ffm_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "data/proto/data.pb.h"
// @@protoc_insertion_point(includes)

namespace PS {
namespace FM {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_factor_5fmachine_2fproto_2ffm_2eproto();
void protobuf_AssignDesc_factor_5fmachine_2fproto_2ffm_2eproto();
void protobuf_ShutdownFile_factor_5fmachine_2fproto_2ffm_2eproto();

class Config;

// ===================================================================

class Config : public ::google::protobuf::Message {
 public:
  Config();
  virtual ~Config();

  Config(const Config& from);

  inline Config& operator=(const Config& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Config& default_instance();

  void Swap(Config* other);

  // implements Message ----------------------------------------------

  Config* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Config& from);
  void MergeFrom(const Config& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PS.DataConfig training_data = 1;
  inline bool has_training_data() const;
  inline void clear_training_data();
  static const int kTrainingDataFieldNumber = 1;
  inline const ::PS::DataConfig& training_data() const;
  inline ::PS::DataConfig* mutable_training_data();
  inline ::PS::DataConfig* release_training_data();
  inline void set_allocated_training_data(::PS::DataConfig* training_data);

  // optional .PS.DataConfig validation_data = 2;
  inline bool has_validation_data() const;
  inline void clear_validation_data();
  static const int kValidationDataFieldNumber = 2;
  inline const ::PS::DataConfig& validation_data() const;
  inline ::PS::DataConfig* mutable_validation_data();
  inline ::PS::DataConfig* release_validation_data();
  inline void set_allocated_validation_data(::PS::DataConfig* validation_data);

  // optional int32 k = 3 [default = 5];
  inline bool has_k() const;
  inline void clear_k();
  static const int kKFieldNumber = 3;
  inline ::google::protobuf::int32 k() const;
  inline void set_k(::google::protobuf::int32 value);

  // optional double eta_w = 4 [default = 0.1];
  inline bool has_eta_w() const;
  inline void clear_eta_w();
  static const int kEtaWFieldNumber = 4;
  inline double eta_w() const;
  inline void set_eta_w(double value);

  // optional double eta_v = 5 [default = 0.1];
  inline bool has_eta_v() const;
  inline void clear_eta_v();
  static const int kEtaVFieldNumber = 5;
  inline double eta_v() const;
  inline void set_eta_v(double value);

  // optional double lambda_w = 6 [default = 1];
  inline bool has_lambda_w() const;
  inline void clear_lambda_w();
  static const int kLambdaWFieldNumber = 6;
  inline double lambda_w() const;
  inline void set_lambda_w(double value);

  // optional double lambda_v = 7 [default = 1];
  inline bool has_lambda_v() const;
  inline void clear_lambda_v();
  static const int kLambdaVFieldNumber = 7;
  inline double lambda_v() const;
  inline void set_lambda_v(double value);

  // optional int32 minibatch = 8 [default = 10000];
  inline bool has_minibatch() const;
  inline void clear_minibatch();
  static const int kMinibatchFieldNumber = 8;
  inline ::google::protobuf::int32 minibatch() const;
  inline void set_minibatch(::google::protobuf::int32 value);

  // optional double sigma = 9 [default = 0.01];
  inline bool has_sigma() const;
  inline void clear_sigma();
  static const int kSigmaFieldNumber = 9;
  inline double sigma() const;
  inline void set_sigma(double value);

  // @@protoc_insertion_point(class_scope:PS.FM.Config)
 private:
  inline void set_has_training_data();
  inline void clear_has_training_data();
  inline void set_has_validation_data();
  inline void clear_has_validation_data();
  inline void set_has_k();
  inline void clear_has_k();
  inline void set_has_eta_w();
  inline void clear_has_eta_w();
  inline void set_has_eta_v();
  inline void clear_has_eta_v();
  inline void set_has_lambda_w();
  inline void clear_has_lambda_w();
  inline void set_has_lambda_v();
  inline void clear_has_lambda_v();
  inline void set_has_minibatch();
  inline void clear_has_minibatch();
  inline void set_has_sigma();
  inline void clear_has_sigma();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::PS::DataConfig* training_data_;
  ::PS::DataConfig* validation_data_;
  double eta_w_;
  double eta_v_;
  ::google::protobuf::int32 k_;
  ::google::protobuf::int32 minibatch_;
  double lambda_w_;
  double lambda_v_;
  double sigma_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_factor_5fmachine_2fproto_2ffm_2eproto();
  friend void protobuf_AssignDesc_factor_5fmachine_2fproto_2ffm_2eproto();
  friend void protobuf_ShutdownFile_factor_5fmachine_2fproto_2ffm_2eproto();

  void InitAsDefaultInstance();
  static Config* default_instance_;
};
// ===================================================================


// ===================================================================

// Config

// optional .PS.DataConfig training_data = 1;
inline bool Config::has_training_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Config::set_has_training_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Config::clear_has_training_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Config::clear_training_data() {
  if (training_data_ != NULL) training_data_->::PS::DataConfig::Clear();
  clear_has_training_data();
}
inline const ::PS::DataConfig& Config::training_data() const {
  return training_data_ != NULL ? *training_data_ : *default_instance_->training_data_;
}
inline ::PS::DataConfig* Config::mutable_training_data() {
  set_has_training_data();
  if (training_data_ == NULL) training_data_ = new ::PS::DataConfig;
  return training_data_;
}
inline ::PS::DataConfig* Config::release_training_data() {
  clear_has_training_data();
  ::PS::DataConfig* temp = training_data_;
  training_data_ = NULL;
  return temp;
}
inline void Config::set_allocated_training_data(::PS::DataConfig* training_data) {
  delete training_data_;
  training_data_ = training_data;
  if (training_data) {
    set_has_training_data();
  } else {
    clear_has_training_data();
  }
}

// optional .PS.DataConfig validation_data = 2;
inline bool Config::has_validation_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Config::set_has_validation_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Config::clear_has_validation_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Config::clear_validation_data() {
  if (validation_data_ != NULL) validation_data_->::PS::DataConfig::Clear();
  clear_has_validation_data();
}
inline const ::PS::DataConfig& Config::validation_data() const {
  return validation_data_ != NULL ? *validation_data_ : *default_instance_->validation_data_;
}
inline ::PS::DataConfig* Config::mutable_validation_data() {
  set_has_validation_data();
  if (validation_data_ == NULL) validation_data_ = new ::PS::DataConfig;
  return validation_data_;
}
inline ::PS::DataConfig* Config::release_validation_data() {
  clear_has_validation_data();
  ::PS::DataConfig* temp = validation_data_;
  validation_data_ = NULL;
  return temp;
}
inline void Config::set_allocated_validation_data(::PS::DataConfig* validation_data) {
  delete validation_data_;
  validation_data_ = validation_data;
  if (validation_data) {
    set_has_validation_data();
  } else {
    clear_has_validation_data();
  }
}

// optional int32 k = 3 [default = 5];
inline bool Config::has_k() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Config::set_has_k() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Config::clear_has_k() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Config::clear_k() {
  k_ = 5;
  clear_has_k();
}
inline ::google::protobuf::int32 Config::k() const {
  return k_;
}
inline void Config::set_k(::google::protobuf::int32 value) {
  set_has_k();
  k_ = value;
}

// optional double eta_w = 4 [default = 0.1];
inline bool Config::has_eta_w() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Config::set_has_eta_w() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Config::clear_has_eta_w() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Config::clear_eta_w() {
  eta_w_ = 0.1;
  clear_has_eta_w();
}
inline double Config::eta_w() const {
  return eta_w_;
}
inline void Config::set_eta_w(double value) {
  set_has_eta_w();
  eta_w_ = value;
}

// optional double eta_v = 5 [default = 0.1];
inline bool Config::has_eta_v() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Config::set_has_eta_v() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Config::clear_has_eta_v() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Config::clear_eta_v() {
  eta_v_ = 0.1;
  clear_has_eta_v();
}
inline double Config::eta_v() const {
  return eta_v_;
}
inline void Config::set_eta_v(double value) {
  set_has_eta_v();
  eta_v_ = value;
}

// optional double lambda_w = 6 [default = 1];
inline bool Config::has_lambda_w() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Config::set_has_lambda_w() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Config::clear_has_lambda_w() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Config::clear_lambda_w() {
  lambda_w_ = 1;
  clear_has_lambda_w();
}
inline double Config::lambda_w() const {
  return lambda_w_;
}
inline void Config::set_lambda_w(double value) {
  set_has_lambda_w();
  lambda_w_ = value;
}

// optional double lambda_v = 7 [default = 1];
inline bool Config::has_lambda_v() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Config::set_has_lambda_v() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Config::clear_has_lambda_v() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Config::clear_lambda_v() {
  lambda_v_ = 1;
  clear_has_lambda_v();
}
inline double Config::lambda_v() const {
  return lambda_v_;
}
inline void Config::set_lambda_v(double value) {
  set_has_lambda_v();
  lambda_v_ = value;
}

// optional int32 minibatch = 8 [default = 10000];
inline bool Config::has_minibatch() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Config::set_has_minibatch() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Config::clear_has_minibatch() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Config::clear_minibatch() {
  minibatch_ = 10000;
  clear_has_minibatch();
}
inline ::google::protobuf::int32 Config::minibatch() const {
  return minibatch_;
}
inline void Config::set_minibatch(::google::protobuf::int32 value) {
  set_has_minibatch();
  minibatch_ = value;
}

// optional double sigma = 9 [default = 0.01];
inline bool Config::has_sigma() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Config::set_has_sigma() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Config::clear_has_sigma() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Config::clear_sigma() {
  sigma_ = 0.01;
  clear_has_sigma();
}
inline double Config::sigma() const {
  return sigma_;
}
inline void Config::set_sigma(double value) {
  set_has_sigma();
  sigma_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace FM
}  // namespace PS

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_factor_5fmachine_2fproto_2ffm_2eproto__INCLUDED
