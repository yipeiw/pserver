// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: util/proto/matrix.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "util/proto/matrix.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace PS {

namespace {

const ::google::protobuf::Descriptor* MatrixInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MatrixInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MatrixInfo_Type_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_util_2fproto_2fmatrix_2eproto() {
  protobuf_AddDesc_util_2fproto_2fmatrix_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "util/proto/matrix.proto");
  GOOGLE_CHECK(file != NULL);
  MatrixInfo_descriptor_ = file->message_type(0);
  static const int MatrixInfo_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatrixInfo, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatrixInfo, row_major_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatrixInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatrixInfo, row_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatrixInfo, col_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatrixInfo, nnz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatrixInfo, sizeof_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatrixInfo, sizeof_value_),
  };
  MatrixInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MatrixInfo_descriptor_,
      MatrixInfo::default_instance_,
      MatrixInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatrixInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatrixInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MatrixInfo));
  MatrixInfo_Type_descriptor_ = MatrixInfo_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_util_2fproto_2fmatrix_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MatrixInfo_descriptor_, &MatrixInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_util_2fproto_2fmatrix_2eproto() {
  delete MatrixInfo::default_instance_;
  delete MatrixInfo_reflection_;
}

void protobuf_AddDesc_util_2fproto_2fmatrix_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::PS::protobuf_AddDesc_util_2fproto_2frange_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\027util/proto/matrix.proto\022\002PS\032\026util/prot"
    "o/range.proto\"\355\001\n\nMatrixInfo\022!\n\004type\030\001 \002"
    "(\0162\023.PS.MatrixInfo.Type\022\021\n\trow_major\030\002 \002"
    "(\010\022\n\n\002id\030\003 \001(\005\022\030\n\003row\030\005 \002(\0132\013.PS.PbRange"
    "\022\030\n\003col\030\006 \002(\0132\013.PS.PbRange\022\013\n\003nnz\030\007 \001(\004\022"
    "\024\n\014sizeof_index\030\010 \001(\r\022\024\n\014sizeof_value\030\t "
    "\002(\r\"0\n\004Type\022\t\n\005DENSE\020\001\022\n\n\006SPARSE\020\002\022\021\n\rSP"
    "ARSE_BINARY\020\003", 293);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "util/proto/matrix.proto", &protobuf_RegisterTypes);
  MatrixInfo::default_instance_ = new MatrixInfo();
  MatrixInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_util_2fproto_2fmatrix_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_util_2fproto_2fmatrix_2eproto {
  StaticDescriptorInitializer_util_2fproto_2fmatrix_2eproto() {
    protobuf_AddDesc_util_2fproto_2fmatrix_2eproto();
  }
} static_descriptor_initializer_util_2fproto_2fmatrix_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* MatrixInfo_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MatrixInfo_Type_descriptor_;
}
bool MatrixInfo_Type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const MatrixInfo_Type MatrixInfo::DENSE;
const MatrixInfo_Type MatrixInfo::SPARSE;
const MatrixInfo_Type MatrixInfo::SPARSE_BINARY;
const MatrixInfo_Type MatrixInfo::Type_MIN;
const MatrixInfo_Type MatrixInfo::Type_MAX;
const int MatrixInfo::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int MatrixInfo::kTypeFieldNumber;
const int MatrixInfo::kRowMajorFieldNumber;
const int MatrixInfo::kIdFieldNumber;
const int MatrixInfo::kRowFieldNumber;
const int MatrixInfo::kColFieldNumber;
const int MatrixInfo::kNnzFieldNumber;
const int MatrixInfo::kSizeofIndexFieldNumber;
const int MatrixInfo::kSizeofValueFieldNumber;
#endif  // !_MSC_VER

MatrixInfo::MatrixInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MatrixInfo::InitAsDefaultInstance() {
  row_ = const_cast< ::PS::PbRange*>(&::PS::PbRange::default_instance());
  col_ = const_cast< ::PS::PbRange*>(&::PS::PbRange::default_instance());
}

MatrixInfo::MatrixInfo(const MatrixInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MatrixInfo::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  row_major_ = false;
  id_ = 0;
  row_ = NULL;
  col_ = NULL;
  nnz_ = GOOGLE_ULONGLONG(0);
  sizeof_index_ = 0u;
  sizeof_value_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MatrixInfo::~MatrixInfo() {
  SharedDtor();
}

void MatrixInfo::SharedDtor() {
  if (this != default_instance_) {
    delete row_;
    delete col_;
  }
}

void MatrixInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MatrixInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MatrixInfo_descriptor_;
}

const MatrixInfo& MatrixInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_util_2fproto_2fmatrix_2eproto();
  return *default_instance_;
}

MatrixInfo* MatrixInfo::default_instance_ = NULL;

MatrixInfo* MatrixInfo::New() const {
  return new MatrixInfo;
}

void MatrixInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
    row_major_ = false;
    id_ = 0;
    if (has_row()) {
      if (row_ != NULL) row_->::PS::PbRange::Clear();
    }
    if (has_col()) {
      if (col_ != NULL) col_->::PS::PbRange::Clear();
    }
    nnz_ = GOOGLE_ULONGLONG(0);
    sizeof_index_ = 0u;
    sizeof_value_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MatrixInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .PS.MatrixInfo.Type type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PS::MatrixInfo_Type_IsValid(value)) {
            set_type(static_cast< ::PS::MatrixInfo_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_row_major;
        break;
      }

      // required bool row_major = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_row_major:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &row_major_)));
          set_has_row_major();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_id;
        break;
      }

      // optional int32 id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_row;
        break;
      }

      // required .PS.PbRange row = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_row:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_row()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_col;
        break;
      }

      // required .PS.PbRange col = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_col:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_col()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_nnz;
        break;
      }

      // optional uint64 nnz = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nnz:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &nnz_)));
          set_has_nnz();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_sizeof_index;
        break;
      }

      // optional uint32 sizeof_index = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sizeof_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sizeof_index_)));
          set_has_sizeof_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_sizeof_value;
        break;
      }

      // required uint32 sizeof_value = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sizeof_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sizeof_value_)));
          set_has_sizeof_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MatrixInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .PS.MatrixInfo.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // required bool row_major = 2;
  if (has_row_major()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->row_major(), output);
  }

  // optional int32 id = 3;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->id(), output);
  }

  // required .PS.PbRange row = 5;
  if (has_row()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->row(), output);
  }

  // required .PS.PbRange col = 6;
  if (has_col()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->col(), output);
  }

  // optional uint64 nnz = 7;
  if (has_nnz()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->nnz(), output);
  }

  // optional uint32 sizeof_index = 8;
  if (has_sizeof_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->sizeof_index(), output);
  }

  // required uint32 sizeof_value = 9;
  if (has_sizeof_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->sizeof_value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MatrixInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .PS.MatrixInfo.Type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // required bool row_major = 2;
  if (has_row_major()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->row_major(), target);
  }

  // optional int32 id = 3;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->id(), target);
  }

  // required .PS.PbRange row = 5;
  if (has_row()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->row(), target);
  }

  // required .PS.PbRange col = 6;
  if (has_col()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->col(), target);
  }

  // optional uint64 nnz = 7;
  if (has_nnz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->nnz(), target);
  }

  // optional uint32 sizeof_index = 8;
  if (has_sizeof_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->sizeof_index(), target);
  }

  // required uint32 sizeof_value = 9;
  if (has_sizeof_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->sizeof_value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MatrixInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .PS.MatrixInfo.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required bool row_major = 2;
    if (has_row_major()) {
      total_size += 1 + 1;
    }

    // optional int32 id = 3;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required .PS.PbRange row = 5;
    if (has_row()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->row());
    }

    // required .PS.PbRange col = 6;
    if (has_col()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->col());
    }

    // optional uint64 nnz = 7;
    if (has_nnz()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->nnz());
    }

    // optional uint32 sizeof_index = 8;
    if (has_sizeof_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sizeof_index());
    }

    // required uint32 sizeof_value = 9;
    if (has_sizeof_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sizeof_value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MatrixInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MatrixInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MatrixInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MatrixInfo::MergeFrom(const MatrixInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_row_major()) {
      set_row_major(from.row_major());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_row()) {
      mutable_row()->::PS::PbRange::MergeFrom(from.row());
    }
    if (from.has_col()) {
      mutable_col()->::PS::PbRange::MergeFrom(from.col());
    }
    if (from.has_nnz()) {
      set_nnz(from.nnz());
    }
    if (from.has_sizeof_index()) {
      set_sizeof_index(from.sizeof_index());
    }
    if (from.has_sizeof_value()) {
      set_sizeof_value(from.sizeof_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MatrixInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MatrixInfo::CopyFrom(const MatrixInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MatrixInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000009b) != 0x0000009b) return false;

  if (has_row()) {
    if (!this->row().IsInitialized()) return false;
  }
  if (has_col()) {
    if (!this->col().IsInitialized()) return false;
  }
  return true;
}

void MatrixInfo::Swap(MatrixInfo* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(row_major_, other->row_major_);
    std::swap(id_, other->id_);
    std::swap(row_, other->row_);
    std::swap(col_, other->col_);
    std::swap(nnz_, other->nnz_);
    std::swap(sizeof_index_, other->sizeof_index_);
    std::swap(sizeof_value_, other->sizeof_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MatrixInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MatrixInfo_descriptor_;
  metadata.reflection = MatrixInfo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace PS

// @@protoc_insertion_point(global_scope)
